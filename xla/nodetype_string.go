// Code generated by "stringer -type=NodeType node.go"; DO NOT EDIT.

package xla

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidNode-0]
	_ = x[ConstantNode-1]
	_ = x[IotaNode-2]
	_ = x[ParameterNode-3]
	_ = x[ConvertTypeNode-4]
	_ = x[WhereNode-5]
	_ = x[TupleNode-6]
	_ = x[GetTupleElementNode-7]
	_ = x[ReshapeNode-8]
	_ = x[BroadcastNode-9]
	_ = x[BroadcastInDimNode-10]
	_ = x[ReduceSumNode-11]
	_ = x[ReduceMaxNode-12]
	_ = x[ReduceMultiplyNode-13]
	_ = x[SliceNode-14]
	_ = x[PadNode-15]
	_ = x[GatherNode-16]
	_ = x[ScatterNode-17]
	_ = x[ConcatenateNode-18]
	_ = x[ConvGeneralDilatedNode-19]
	_ = x[ReverseNode-20]
	_ = x[TransposeNode-21]
	_ = x[ReduceWindowNode-22]
	_ = x[SelectAndScatterNode-23]
	_ = x[BatchNormTrainingNode-24]
	_ = x[BatchNormInferenceNode-25]
	_ = x[BatchNormGradNode-26]
	_ = x[DotGeneralNode-27]
	_ = x[ArgMinMaxNode-28]
	_ = x[AbsNode-29]
	_ = x[NegNode-30]
	_ = x[ExpNode-31]
	_ = x[Expm1Node-32]
	_ = x[FloorNode-33]
	_ = x[CeilNode-34]
	_ = x[RoundNode-35]
	_ = x[LogNode-36]
	_ = x[Log1pNode-37]
	_ = x[LogicalNotNode-38]
	_ = x[LogisticNode-39]
	_ = x[SignNode-40]
	_ = x[ClzNode-41]
	_ = x[CosNode-42]
	_ = x[SinNode-43]
	_ = x[TanhNode-44]
	_ = x[SqrtNode-45]
	_ = x[RsqrtNode-46]
	_ = x[ImagNode-47]
	_ = x[RealNode-48]
	_ = x[AddNode-49]
	_ = x[MulNode-50]
	_ = x[SubNode-51]
	_ = x[DivNode-52]
	_ = x[RemNode-53]
	_ = x[AndNode-54]
	_ = x[OrNode-55]
	_ = x[XorNode-56]
	_ = x[DotNode-57]
	_ = x[MinNode-58]
	_ = x[MaxNode-59]
	_ = x[PowNode-60]
	_ = x[EqualNode-61]
	_ = x[NotEqualNode-62]
	_ = x[GreaterOrEqualNode-63]
	_ = x[GreaterThanNode-64]
	_ = x[LessOrEqualNode-65]
	_ = x[LessThanNode-66]
	_ = x[EqualTotalOrderNode-67]
	_ = x[NotEqualTotalOrderNode-68]
	_ = x[GreaterOrEqualTotalOrderNode-69]
	_ = x[GreaterThanTotalOrderNode-70]
	_ = x[LessOrEqualTotalOrderNode-71]
	_ = x[LessThanTotalOrderNode-72]
	_ = x[RngBitGeneratorNode-73]
	_ = x[RngNormalNode-74]
	_ = x[RngUniformNode-75]
	_ = x[FftNode-76]
}

const _NodeType_name = "InvalidNodeConstantNodeIotaNodeParameterNodeConvertTypeNodeWhereNodeTupleNodeGetTupleElementNodeReshapeNodeBroadcastNodeBroadcastInDimNodeReduceSumNodeReduceMaxNodeReduceMultiplyNodeSliceNodePadNodeGatherNodeScatterNodeConcatenateNodeConvGeneralDilatedNodeReverseNodeTransposeNodeReduceWindowNodeSelectAndScatterNodeBatchNormTrainingNodeBatchNormInferenceNodeBatchNormGradNodeDotGeneralNodeArgMinMaxNodeAbsNodeNegNodeExpNodeExpm1NodeFloorNodeCeilNodeRoundNodeLogNodeLog1pNodeLogicalNotNodeLogisticNodeSignNodeClzNodeCosNodeSinNodeTanhNodeSqrtNodeRsqrtNodeImagNodeRealNodeAddNodeMulNodeSubNodeDivNodeRemNodeAndNodeOrNodeXorNodeDotNodeMinNodeMaxNodePowNodeEqualNodeNotEqualNodeGreaterOrEqualNodeGreaterThanNodeLessOrEqualNodeLessThanNodeEqualTotalOrderNodeNotEqualTotalOrderNodeGreaterOrEqualTotalOrderNodeGreaterThanTotalOrderNodeLessOrEqualTotalOrderNodeLessThanTotalOrderNodeRngBitGeneratorNodeRngNormalNodeRngUniformNodeFftNode"

var _NodeType_index = [...]uint16{0, 11, 23, 31, 44, 59, 68, 77, 96, 107, 120, 138, 151, 164, 182, 191, 198, 208, 219, 234, 256, 267, 280, 296, 316, 337, 359, 376, 390, 403, 410, 417, 424, 433, 442, 450, 459, 466, 475, 489, 501, 509, 516, 523, 530, 538, 546, 555, 563, 571, 578, 585, 592, 599, 606, 613, 619, 626, 633, 640, 647, 654, 663, 675, 693, 708, 723, 735, 754, 776, 804, 829, 854, 876, 895, 908, 922, 929}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
