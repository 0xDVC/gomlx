// Code generated by "stringer -type=NodeType node.go"; DO NOT EDIT.

package xla

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidNode-0]
	_ = x[ConstantNode-1]
	_ = x[IotaNode-2]
	_ = x[ParameterNode-3]
	_ = x[ConvertTypeNode-4]
	_ = x[WhereNode-5]
	_ = x[TupleNode-6]
	_ = x[GetTupleElementNode-7]
	_ = x[ReshapeNode-8]
	_ = x[BroadcastNode-9]
	_ = x[BroadcastInDimNode-10]
	_ = x[ReduceSumNode-11]
	_ = x[ReduceMaxNode-12]
	_ = x[ReduceMultiplyNode-13]
	_ = x[SliceNode-14]
	_ = x[PadNode-15]
	_ = x[GatherNode-16]
	_ = x[ScatterNode-17]
	_ = x[ConcatenateNode-18]
	_ = x[ConvGeneralDilatedNode-19]
	_ = x[ReverseNode-20]
	_ = x[TransposeNode-21]
	_ = x[ReduceWindowNode-22]
	_ = x[SelectAndScatterNode-23]
	_ = x[BatchNormTrainingNode-24]
	_ = x[BatchNormInferenceNode-25]
	_ = x[BatchNormGradNode-26]
	_ = x[DotGeneralNode-27]
	_ = x[ArgMinMaxNode-28]
	_ = x[FftNode-29]
	_ = x[AbsNode-30]
	_ = x[NegNode-31]
	_ = x[ExpNode-32]
	_ = x[Expm1Node-33]
	_ = x[FloorNode-34]
	_ = x[CeilNode-35]
	_ = x[RoundNode-36]
	_ = x[LogNode-37]
	_ = x[Log1pNode-38]
	_ = x[LogicalNotNode-39]
	_ = x[LogisticNode-40]
	_ = x[SignNode-41]
	_ = x[ClzNode-42]
	_ = x[CosNode-43]
	_ = x[SinNode-44]
	_ = x[TanhNode-45]
	_ = x[SqrtNode-46]
	_ = x[RsqrtNode-47]
	_ = x[ImagNode-48]
	_ = x[RealNode-49]
	_ = x[AddNode-50]
	_ = x[MulNode-51]
	_ = x[SubNode-52]
	_ = x[DivNode-53]
	_ = x[RemNode-54]
	_ = x[AndNode-55]
	_ = x[OrNode-56]
	_ = x[XorNode-57]
	_ = x[DotNode-58]
	_ = x[MinNode-59]
	_ = x[MaxNode-60]
	_ = x[PowNode-61]
	_ = x[EqualNode-62]
	_ = x[NotEqualNode-63]
	_ = x[GreaterOrEqualNode-64]
	_ = x[GreaterThanNode-65]
	_ = x[LessOrEqualNode-66]
	_ = x[LessThanNode-67]
	_ = x[EqualTotalOrderNode-68]
	_ = x[NotEqualTotalOrderNode-69]
	_ = x[GreaterOrEqualTotalOrderNode-70]
	_ = x[GreaterThanTotalOrderNode-71]
	_ = x[LessOrEqualTotalOrderNode-72]
	_ = x[LessThanTotalOrderNode-73]
	_ = x[RngBitGeneratorNode-74]
	_ = x[RngNormalNode-75]
	_ = x[RngUniformNode-76]
}

const _NodeType_name = "InvalidNodeConstantNodeIotaNodeParameterNodeConvertTypeNodeWhereNodeTupleNodeGetTupleElementNodeReshapeNodeBroadcastNodeBroadcastInDimNodeReduceSumNodeReduceMaxNodeReduceMultiplyNodeSliceNodePadNodeGatherNodeScatterNodeConcatenateNodeConvGeneralDilatedNodeReverseNodeTransposeNodeReduceWindowNodeSelectAndScatterNodeBatchNormTrainingNodeBatchNormInferenceNodeBatchNormGradNodeDotGeneralNodeArgMinMaxNodeFftNodeAbsNodeNegNodeExpNodeExpm1NodeFloorNodeCeilNodeRoundNodeLogNodeLog1pNodeLogicalNotNodeLogisticNodeSignNodeClzNodeCosNodeSinNodeTanhNodeSqrtNodeRsqrtNodeImagNodeRealNodeAddNodeMulNodeSubNodeDivNodeRemNodeAndNodeOrNodeXorNodeDotNodeMinNodeMaxNodePowNodeEqualNodeNotEqualNodeGreaterOrEqualNodeGreaterThanNodeLessOrEqualNodeLessThanNodeEqualTotalOrderNodeNotEqualTotalOrderNodeGreaterOrEqualTotalOrderNodeGreaterThanTotalOrderNodeLessOrEqualTotalOrderNodeLessThanTotalOrderNodeRngBitGeneratorNodeRngNormalNodeRngUniformNode"

var _NodeType_index = [...]uint16{0, 11, 23, 31, 44, 59, 68, 77, 96, 107, 120, 138, 151, 164, 182, 191, 198, 208, 219, 234, 256, 267, 280, 296, 316, 337, 359, 376, 390, 403, 410, 417, 424, 431, 440, 449, 457, 466, 473, 482, 496, 508, 516, 523, 530, 537, 545, 553, 562, 570, 578, 585, 592, 599, 606, 613, 620, 626, 633, 640, 647, 654, 661, 670, 682, 700, 715, 730, 742, 761, 783, 811, 836, 861, 883, 902, 915, 929}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
