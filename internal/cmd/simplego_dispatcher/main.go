package main

import (
	"flag"
	"fmt"
	"github.com/janpfeifer/must"
	"os"
	"os/exec"
	"text/template"
)

var (
	flagDispatcher  = flag.String("dispatcher", "", "Name of the dispatcher where the functions will be registered.")
	flagGeneric     = flag.String("generic", "", "Name of the generic function that will be registered.")
	flagPackageName = flag.String("package", "simplego", "Name of the package where the functions will be registered.")
	flagFileSuffix  = flag.String("suffix", "", "Suffix to add to the generated file name: this can be used to have multiple registrations for the same dispatcher, but different subset of dtypes.")

	flagInteger  = flag.Bool("int", false, "Register for all integer DTypes -- it doesn't include unsigned types.")
	flagUnsigned = flag.Bool("uint", false, "Register for all unsigned DTypes.")
	flagFloat    = flag.Bool("float", false, "Register for all float DTypes -- it doesn't include BFloat16")
	flagBF16     = flag.Bool("bf16", false, "Register for the BFloat16 dtype.")
	flagBool     = flag.Bool("bool", false, "Register for the Bool dtype.")
)

type DTypeInfo struct {
	DType, GoType string
}

type Data struct {
	Package, Dispatcher, Generic string
	DTypes                       []DTypeInfo
	BF16                         bool
}

func main() {
	flag.Parse()
	if *flagDispatcher == "" {
		panic("dispatcher is required")
	}
	if *flagGeneric == "" {
		panic("generic is required")
	}
	data := Data{
		Package:    *flagPackageName,
		Dispatcher: *flagDispatcher,
		Generic:    *flagGeneric,
		DTypes:     make([]DTypeInfo, 0, 32),
	}
	if *flagInteger {
		data.DTypes = append(data.DTypes,
			DTypeInfo{"Int8", "int8"},
			DTypeInfo{"Int16", "int16"},
			DTypeInfo{"Int32", "int32"},
			DTypeInfo{"Int64", "int64"},
		)
	}
	if *flagUnsigned {
		data.DTypes = append(data.DTypes,
			DTypeInfo{"Uint8", "uint8"},
			DTypeInfo{"Uint16", "uint16"},
			DTypeInfo{"Uint32", "uint32"},
			DTypeInfo{"Uint64", "uint64"},
		)
	}
	if *flagFloat {
		data.DTypes = append(data.DTypes,
			DTypeInfo{"Float32", "float32"},
			DTypeInfo{"Float64", "float64"},
		)
	}
	if *flagBF16 {
		data.DTypes = append(data.DTypes,
			DTypeInfo{"BFloat16", "bfloat16.BFloat16"},
		)
	}
	if *flagBool {
		data.BF16 = true
		data.DTypes = append(data.DTypes,
			DTypeInfo{"Bool", "bool"},
		)
	}
	if len(data.DTypes) == 0 {
		panic("no dtype selected, pls use at least one of the flags: -int, -uint, -float, -bf16, -bool")
	}

	fileName := fmt.Sprintf("gen_register_%s%s.go", *flagDispatcher, *flagFileSuffix)
	registerTemplate := template.Must(
		template.
			New(fileName).
			Parse(

				`/***** File generated by ./internal/cmd/simplego_dispatcher: --dispatcher={{.Dispatcher}} --generic={{.Generic}}. Don't edit it directly. *****/

package {{.Package}}

import (
	"github.com/gomlx/gopjrt/dtypes"
{{- if .BF16 }}
	"github.com/gomlx/gopjrt/dtypes/bfloat16"
{{- end }}
)

{{- $dispatcher := .Dispatcher }}
{{- $generic := .Generic }}

func init() { 
{{- range .DTypes }}
	{{$dispatcher}}.RegisterIfNotSet(dtypes.{{.DType}}, {{$generic}}[{{.GoType}}])
{{- end }}
}	
`))

	f := must.M1(os.Create(fileName))
	must.M(registerTemplate.Execute(f, data))
	must.M(f.Close())

	cmd := exec.Command("gofmt", "-w", fileName)
	fmt.Printf("\t%s\n", cmd)
	must.M(cmd.Run())
	fmt.Printf("\t\tgenerated %q\n", fileName)

}
