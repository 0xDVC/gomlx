// Code generated by "enumer -type=OpType -trimprefix=OpType gen_op_types.go"; DO NOT EDIT.

package backends

import (
	"fmt"
	"strings"
)

const _OpTypeName = "OpShapeOpParameterOpConstantOpIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 18, 28, 38, 50, 65, 86, 106, 123, 131, 134, 137, 146, 153, 163, 173, 182, 192, 201, 215, 219, 222, 229, 240, 244, 262, 274, 277, 280, 283, 293, 305, 323, 328, 343, 346, 349, 354, 357, 362, 368, 382, 406, 417, 438, 442, 446, 454, 465, 486, 494, 512, 515, 520, 530, 540, 549, 559, 567, 570, 573, 576, 579, 587, 605, 608, 611, 615, 631, 646, 662, 678, 693, 709, 718, 727, 740, 749, 752, 759, 766, 771, 776, 786, 796, 806, 825, 844, 863, 872, 892, 909, 913, 916, 921, 925, 928, 932, 941, 946, 950}

const _OpTypeLowerName = "opshapeopparameteropconstantopidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[OpTypeOpShape-(0)]
	_ = x[OpTypeOpParameter-(1)]
	_ = x[OpTypeOpConstant-(2)]
	_ = x[OpTypeOpIdentity-(3)]
	_ = x[OpTypeReduceWindow-(4)]
	_ = x[OpTypeRngBitGenerator-(5)]
	_ = x[OpTypeBatchNormForInference-(6)]
	_ = x[OpTypeBatchNormForTraining-(7)]
	_ = x[OpTypeBatchNormGradient-(8)]
	_ = x[OpTypeBitCount-(9)]
	_ = x[OpTypeAbs-(10)]
	_ = x[OpTypeAdd-(11)]
	_ = x[OpTypeArgMinMax-(12)]
	_ = x[OpTypeBitcast-(13)]
	_ = x[OpTypeBitwiseAnd-(14)]
	_ = x[OpTypeBitwiseNot-(15)]
	_ = x[OpTypeBitwiseOr-(16)]
	_ = x[OpTypeBitwiseXor-(17)]
	_ = x[OpTypeBroadcast-(18)]
	_ = x[OpTypeBroadcastInDim-(19)]
	_ = x[OpTypeCeil-(20)]
	_ = x[OpTypeClz-(21)]
	_ = x[OpTypeComplex-(22)]
	_ = x[OpTypeConcatenate-(23)]
	_ = x[OpTypeConj-(24)]
	_ = x[OpTypeConvGeneralDilated-(25)]
	_ = x[OpTypeConvertDType-(26)]
	_ = x[OpTypeCos-(27)]
	_ = x[OpTypeDiv-(28)]
	_ = x[OpTypeDot-(29)]
	_ = x[OpTypeDotGeneral-(30)]
	_ = x[OpTypeDynamicSlice-(31)]
	_ = x[OpTypeDynamicUpdateSlice-(32)]
	_ = x[OpTypeEqual-(33)]
	_ = x[OpTypeEqualTotalOrder-(34)]
	_ = x[OpTypeErf-(35)]
	_ = x[OpTypeExp-(36)]
	_ = x[OpTypeExpm1-(37)]
	_ = x[OpTypeFFT-(38)]
	_ = x[OpTypeFloor-(39)]
	_ = x[OpTypeGather-(40)]
	_ = x[OpTypeGreaterOrEqual-(41)]
	_ = x[OpTypeGreaterOrEqualTotalOrder-(42)]
	_ = x[OpTypeGreaterThan-(43)]
	_ = x[OpTypeGreaterThanTotalOrder-(44)]
	_ = x[OpTypeImag-(45)]
	_ = x[OpTypeIota-(46)]
	_ = x[OpTypeIsFinite-(47)]
	_ = x[OpTypeLessOrEqual-(48)]
	_ = x[OpTypeLessOrEqualTotalOrder-(49)]
	_ = x[OpTypeLessThan-(50)]
	_ = x[OpTypeLessThanTotalOrder-(51)]
	_ = x[OpTypeLog-(52)]
	_ = x[OpTypeLog1p-(53)]
	_ = x[OpTypeLogicalAnd-(54)]
	_ = x[OpTypeLogicalNot-(55)]
	_ = x[OpTypeLogicalOr-(56)]
	_ = x[OpTypeLogicalXor-(57)]
	_ = x[OpTypeLogistic-(58)]
	_ = x[OpTypeMax-(59)]
	_ = x[OpTypeMin-(60)]
	_ = x[OpTypeMul-(61)]
	_ = x[OpTypeNeg-(62)]
	_ = x[OpTypeNotEqual-(63)]
	_ = x[OpTypeNotEqualTotalOrder-(64)]
	_ = x[OpTypePad-(65)]
	_ = x[OpTypePow-(66)]
	_ = x[OpTypeReal-(67)]
	_ = x[OpTypeReduceBitwiseAnd-(68)]
	_ = x[OpTypeReduceBitwiseOr-(69)]
	_ = x[OpTypeReduceBitwiseXor-(70)]
	_ = x[OpTypeReduceLogicalAnd-(71)]
	_ = x[OpTypeReduceLogicalOr-(72)]
	_ = x[OpTypeReduceLogicalXor-(73)]
	_ = x[OpTypeReduceMax-(74)]
	_ = x[OpTypeReduceMin-(75)]
	_ = x[OpTypeReduceProduct-(76)]
	_ = x[OpTypeReduceSum-(77)]
	_ = x[OpTypeRem-(78)]
	_ = x[OpTypeReshape-(79)]
	_ = x[OpTypeReverse-(80)]
	_ = x[OpTypeRound-(81)]
	_ = x[OpTypeRsqrt-(82)]
	_ = x[OpTypeScatterMax-(83)]
	_ = x[OpTypeScatterMin-(84)]
	_ = x[OpTypeScatterSum-(85)]
	_ = x[OpTypeSelectAndScatterMax-(86)]
	_ = x[OpTypeSelectAndScatterMin-(87)]
	_ = x[OpTypeSelectAndScatterSum-(88)]
	_ = x[OpTypeShiftLeft-(89)]
	_ = x[OpTypeShiftRightArithmetic-(90)]
	_ = x[OpTypeShiftRightLogical-(91)]
	_ = x[OpTypeSign-(92)]
	_ = x[OpTypeSin-(93)]
	_ = x[OpTypeSlice-(94)]
	_ = x[OpTypeSqrt-(95)]
	_ = x[OpTypeSub-(96)]
	_ = x[OpTypeTanh-(97)]
	_ = x[OpTypeTranspose-(98)]
	_ = x[OpTypeWhere-(99)]
	_ = x[OpTypeLast-(100)]
}

var _OpTypeValues = []OpType{OpTypeOpShape, OpTypeOpParameter, OpTypeOpConstant, OpTypeOpIdentity, OpTypeReduceWindow, OpTypeRngBitGenerator, OpTypeBatchNormForInference, OpTypeBatchNormForTraining, OpTypeBatchNormGradient, OpTypeBitCount, OpTypeAbs, OpTypeAdd, OpTypeArgMinMax, OpTypeBitcast, OpTypeBitwiseAnd, OpTypeBitwiseNot, OpTypeBitwiseOr, OpTypeBitwiseXor, OpTypeBroadcast, OpTypeBroadcastInDim, OpTypeCeil, OpTypeClz, OpTypeComplex, OpTypeConcatenate, OpTypeConj, OpTypeConvGeneralDilated, OpTypeConvertDType, OpTypeCos, OpTypeDiv, OpTypeDot, OpTypeDotGeneral, OpTypeDynamicSlice, OpTypeDynamicUpdateSlice, OpTypeEqual, OpTypeEqualTotalOrder, OpTypeErf, OpTypeExp, OpTypeExpm1, OpTypeFFT, OpTypeFloor, OpTypeGather, OpTypeGreaterOrEqual, OpTypeGreaterOrEqualTotalOrder, OpTypeGreaterThan, OpTypeGreaterThanTotalOrder, OpTypeImag, OpTypeIota, OpTypeIsFinite, OpTypeLessOrEqual, OpTypeLessOrEqualTotalOrder, OpTypeLessThan, OpTypeLessThanTotalOrder, OpTypeLog, OpTypeLog1p, OpTypeLogicalAnd, OpTypeLogicalNot, OpTypeLogicalOr, OpTypeLogicalXor, OpTypeLogistic, OpTypeMax, OpTypeMin, OpTypeMul, OpTypeNeg, OpTypeNotEqual, OpTypeNotEqualTotalOrder, OpTypePad, OpTypePow, OpTypeReal, OpTypeReduceBitwiseAnd, OpTypeReduceBitwiseOr, OpTypeReduceBitwiseXor, OpTypeReduceLogicalAnd, OpTypeReduceLogicalOr, OpTypeReduceLogicalXor, OpTypeReduceMax, OpTypeReduceMin, OpTypeReduceProduct, OpTypeReduceSum, OpTypeRem, OpTypeReshape, OpTypeReverse, OpTypeRound, OpTypeRsqrt, OpTypeScatterMax, OpTypeScatterMin, OpTypeScatterSum, OpTypeSelectAndScatterMax, OpTypeSelectAndScatterMin, OpTypeSelectAndScatterSum, OpTypeShiftLeft, OpTypeShiftRightArithmetic, OpTypeShiftRightLogical, OpTypeSign, OpTypeSin, OpTypeSlice, OpTypeSqrt, OpTypeSub, OpTypeTanh, OpTypeTranspose, OpTypeWhere, OpTypeLast}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          OpTypeOpShape,
	_OpTypeLowerName[0:7]:     OpTypeOpShape,
	_OpTypeName[7:18]:         OpTypeOpParameter,
	_OpTypeLowerName[7:18]:    OpTypeOpParameter,
	_OpTypeName[18:28]:        OpTypeOpConstant,
	_OpTypeLowerName[18:28]:   OpTypeOpConstant,
	_OpTypeName[28:38]:        OpTypeOpIdentity,
	_OpTypeLowerName[28:38]:   OpTypeOpIdentity,
	_OpTypeName[38:50]:        OpTypeReduceWindow,
	_OpTypeLowerName[38:50]:   OpTypeReduceWindow,
	_OpTypeName[50:65]:        OpTypeRngBitGenerator,
	_OpTypeLowerName[50:65]:   OpTypeRngBitGenerator,
	_OpTypeName[65:86]:        OpTypeBatchNormForInference,
	_OpTypeLowerName[65:86]:   OpTypeBatchNormForInference,
	_OpTypeName[86:106]:       OpTypeBatchNormForTraining,
	_OpTypeLowerName[86:106]:  OpTypeBatchNormForTraining,
	_OpTypeName[106:123]:      OpTypeBatchNormGradient,
	_OpTypeLowerName[106:123]: OpTypeBatchNormGradient,
	_OpTypeName[123:131]:      OpTypeBitCount,
	_OpTypeLowerName[123:131]: OpTypeBitCount,
	_OpTypeName[131:134]:      OpTypeAbs,
	_OpTypeLowerName[131:134]: OpTypeAbs,
	_OpTypeName[134:137]:      OpTypeAdd,
	_OpTypeLowerName[134:137]: OpTypeAdd,
	_OpTypeName[137:146]:      OpTypeArgMinMax,
	_OpTypeLowerName[137:146]: OpTypeArgMinMax,
	_OpTypeName[146:153]:      OpTypeBitcast,
	_OpTypeLowerName[146:153]: OpTypeBitcast,
	_OpTypeName[153:163]:      OpTypeBitwiseAnd,
	_OpTypeLowerName[153:163]: OpTypeBitwiseAnd,
	_OpTypeName[163:173]:      OpTypeBitwiseNot,
	_OpTypeLowerName[163:173]: OpTypeBitwiseNot,
	_OpTypeName[173:182]:      OpTypeBitwiseOr,
	_OpTypeLowerName[173:182]: OpTypeBitwiseOr,
	_OpTypeName[182:192]:      OpTypeBitwiseXor,
	_OpTypeLowerName[182:192]: OpTypeBitwiseXor,
	_OpTypeName[192:201]:      OpTypeBroadcast,
	_OpTypeLowerName[192:201]: OpTypeBroadcast,
	_OpTypeName[201:215]:      OpTypeBroadcastInDim,
	_OpTypeLowerName[201:215]: OpTypeBroadcastInDim,
	_OpTypeName[215:219]:      OpTypeCeil,
	_OpTypeLowerName[215:219]: OpTypeCeil,
	_OpTypeName[219:222]:      OpTypeClz,
	_OpTypeLowerName[219:222]: OpTypeClz,
	_OpTypeName[222:229]:      OpTypeComplex,
	_OpTypeLowerName[222:229]: OpTypeComplex,
	_OpTypeName[229:240]:      OpTypeConcatenate,
	_OpTypeLowerName[229:240]: OpTypeConcatenate,
	_OpTypeName[240:244]:      OpTypeConj,
	_OpTypeLowerName[240:244]: OpTypeConj,
	_OpTypeName[244:262]:      OpTypeConvGeneralDilated,
	_OpTypeLowerName[244:262]: OpTypeConvGeneralDilated,
	_OpTypeName[262:274]:      OpTypeConvertDType,
	_OpTypeLowerName[262:274]: OpTypeConvertDType,
	_OpTypeName[274:277]:      OpTypeCos,
	_OpTypeLowerName[274:277]: OpTypeCos,
	_OpTypeName[277:280]:      OpTypeDiv,
	_OpTypeLowerName[277:280]: OpTypeDiv,
	_OpTypeName[280:283]:      OpTypeDot,
	_OpTypeLowerName[280:283]: OpTypeDot,
	_OpTypeName[283:293]:      OpTypeDotGeneral,
	_OpTypeLowerName[283:293]: OpTypeDotGeneral,
	_OpTypeName[293:305]:      OpTypeDynamicSlice,
	_OpTypeLowerName[293:305]: OpTypeDynamicSlice,
	_OpTypeName[305:323]:      OpTypeDynamicUpdateSlice,
	_OpTypeLowerName[305:323]: OpTypeDynamicUpdateSlice,
	_OpTypeName[323:328]:      OpTypeEqual,
	_OpTypeLowerName[323:328]: OpTypeEqual,
	_OpTypeName[328:343]:      OpTypeEqualTotalOrder,
	_OpTypeLowerName[328:343]: OpTypeEqualTotalOrder,
	_OpTypeName[343:346]:      OpTypeErf,
	_OpTypeLowerName[343:346]: OpTypeErf,
	_OpTypeName[346:349]:      OpTypeExp,
	_OpTypeLowerName[346:349]: OpTypeExp,
	_OpTypeName[349:354]:      OpTypeExpm1,
	_OpTypeLowerName[349:354]: OpTypeExpm1,
	_OpTypeName[354:357]:      OpTypeFFT,
	_OpTypeLowerName[354:357]: OpTypeFFT,
	_OpTypeName[357:362]:      OpTypeFloor,
	_OpTypeLowerName[357:362]: OpTypeFloor,
	_OpTypeName[362:368]:      OpTypeGather,
	_OpTypeLowerName[362:368]: OpTypeGather,
	_OpTypeName[368:382]:      OpTypeGreaterOrEqual,
	_OpTypeLowerName[368:382]: OpTypeGreaterOrEqual,
	_OpTypeName[382:406]:      OpTypeGreaterOrEqualTotalOrder,
	_OpTypeLowerName[382:406]: OpTypeGreaterOrEqualTotalOrder,
	_OpTypeName[406:417]:      OpTypeGreaterThan,
	_OpTypeLowerName[406:417]: OpTypeGreaterThan,
	_OpTypeName[417:438]:      OpTypeGreaterThanTotalOrder,
	_OpTypeLowerName[417:438]: OpTypeGreaterThanTotalOrder,
	_OpTypeName[438:442]:      OpTypeImag,
	_OpTypeLowerName[438:442]: OpTypeImag,
	_OpTypeName[442:446]:      OpTypeIota,
	_OpTypeLowerName[442:446]: OpTypeIota,
	_OpTypeName[446:454]:      OpTypeIsFinite,
	_OpTypeLowerName[446:454]: OpTypeIsFinite,
	_OpTypeName[454:465]:      OpTypeLessOrEqual,
	_OpTypeLowerName[454:465]: OpTypeLessOrEqual,
	_OpTypeName[465:486]:      OpTypeLessOrEqualTotalOrder,
	_OpTypeLowerName[465:486]: OpTypeLessOrEqualTotalOrder,
	_OpTypeName[486:494]:      OpTypeLessThan,
	_OpTypeLowerName[486:494]: OpTypeLessThan,
	_OpTypeName[494:512]:      OpTypeLessThanTotalOrder,
	_OpTypeLowerName[494:512]: OpTypeLessThanTotalOrder,
	_OpTypeName[512:515]:      OpTypeLog,
	_OpTypeLowerName[512:515]: OpTypeLog,
	_OpTypeName[515:520]:      OpTypeLog1p,
	_OpTypeLowerName[515:520]: OpTypeLog1p,
	_OpTypeName[520:530]:      OpTypeLogicalAnd,
	_OpTypeLowerName[520:530]: OpTypeLogicalAnd,
	_OpTypeName[530:540]:      OpTypeLogicalNot,
	_OpTypeLowerName[530:540]: OpTypeLogicalNot,
	_OpTypeName[540:549]:      OpTypeLogicalOr,
	_OpTypeLowerName[540:549]: OpTypeLogicalOr,
	_OpTypeName[549:559]:      OpTypeLogicalXor,
	_OpTypeLowerName[549:559]: OpTypeLogicalXor,
	_OpTypeName[559:567]:      OpTypeLogistic,
	_OpTypeLowerName[559:567]: OpTypeLogistic,
	_OpTypeName[567:570]:      OpTypeMax,
	_OpTypeLowerName[567:570]: OpTypeMax,
	_OpTypeName[570:573]:      OpTypeMin,
	_OpTypeLowerName[570:573]: OpTypeMin,
	_OpTypeName[573:576]:      OpTypeMul,
	_OpTypeLowerName[573:576]: OpTypeMul,
	_OpTypeName[576:579]:      OpTypeNeg,
	_OpTypeLowerName[576:579]: OpTypeNeg,
	_OpTypeName[579:587]:      OpTypeNotEqual,
	_OpTypeLowerName[579:587]: OpTypeNotEqual,
	_OpTypeName[587:605]:      OpTypeNotEqualTotalOrder,
	_OpTypeLowerName[587:605]: OpTypeNotEqualTotalOrder,
	_OpTypeName[605:608]:      OpTypePad,
	_OpTypeLowerName[605:608]: OpTypePad,
	_OpTypeName[608:611]:      OpTypePow,
	_OpTypeLowerName[608:611]: OpTypePow,
	_OpTypeName[611:615]:      OpTypeReal,
	_OpTypeLowerName[611:615]: OpTypeReal,
	_OpTypeName[615:631]:      OpTypeReduceBitwiseAnd,
	_OpTypeLowerName[615:631]: OpTypeReduceBitwiseAnd,
	_OpTypeName[631:646]:      OpTypeReduceBitwiseOr,
	_OpTypeLowerName[631:646]: OpTypeReduceBitwiseOr,
	_OpTypeName[646:662]:      OpTypeReduceBitwiseXor,
	_OpTypeLowerName[646:662]: OpTypeReduceBitwiseXor,
	_OpTypeName[662:678]:      OpTypeReduceLogicalAnd,
	_OpTypeLowerName[662:678]: OpTypeReduceLogicalAnd,
	_OpTypeName[678:693]:      OpTypeReduceLogicalOr,
	_OpTypeLowerName[678:693]: OpTypeReduceLogicalOr,
	_OpTypeName[693:709]:      OpTypeReduceLogicalXor,
	_OpTypeLowerName[693:709]: OpTypeReduceLogicalXor,
	_OpTypeName[709:718]:      OpTypeReduceMax,
	_OpTypeLowerName[709:718]: OpTypeReduceMax,
	_OpTypeName[718:727]:      OpTypeReduceMin,
	_OpTypeLowerName[718:727]: OpTypeReduceMin,
	_OpTypeName[727:740]:      OpTypeReduceProduct,
	_OpTypeLowerName[727:740]: OpTypeReduceProduct,
	_OpTypeName[740:749]:      OpTypeReduceSum,
	_OpTypeLowerName[740:749]: OpTypeReduceSum,
	_OpTypeName[749:752]:      OpTypeRem,
	_OpTypeLowerName[749:752]: OpTypeRem,
	_OpTypeName[752:759]:      OpTypeReshape,
	_OpTypeLowerName[752:759]: OpTypeReshape,
	_OpTypeName[759:766]:      OpTypeReverse,
	_OpTypeLowerName[759:766]: OpTypeReverse,
	_OpTypeName[766:771]:      OpTypeRound,
	_OpTypeLowerName[766:771]: OpTypeRound,
	_OpTypeName[771:776]:      OpTypeRsqrt,
	_OpTypeLowerName[771:776]: OpTypeRsqrt,
	_OpTypeName[776:786]:      OpTypeScatterMax,
	_OpTypeLowerName[776:786]: OpTypeScatterMax,
	_OpTypeName[786:796]:      OpTypeScatterMin,
	_OpTypeLowerName[786:796]: OpTypeScatterMin,
	_OpTypeName[796:806]:      OpTypeScatterSum,
	_OpTypeLowerName[796:806]: OpTypeScatterSum,
	_OpTypeName[806:825]:      OpTypeSelectAndScatterMax,
	_OpTypeLowerName[806:825]: OpTypeSelectAndScatterMax,
	_OpTypeName[825:844]:      OpTypeSelectAndScatterMin,
	_OpTypeLowerName[825:844]: OpTypeSelectAndScatterMin,
	_OpTypeName[844:863]:      OpTypeSelectAndScatterSum,
	_OpTypeLowerName[844:863]: OpTypeSelectAndScatterSum,
	_OpTypeName[863:872]:      OpTypeShiftLeft,
	_OpTypeLowerName[863:872]: OpTypeShiftLeft,
	_OpTypeName[872:892]:      OpTypeShiftRightArithmetic,
	_OpTypeLowerName[872:892]: OpTypeShiftRightArithmetic,
	_OpTypeName[892:909]:      OpTypeShiftRightLogical,
	_OpTypeLowerName[892:909]: OpTypeShiftRightLogical,
	_OpTypeName[909:913]:      OpTypeSign,
	_OpTypeLowerName[909:913]: OpTypeSign,
	_OpTypeName[913:916]:      OpTypeSin,
	_OpTypeLowerName[913:916]: OpTypeSin,
	_OpTypeName[916:921]:      OpTypeSlice,
	_OpTypeLowerName[916:921]: OpTypeSlice,
	_OpTypeName[921:925]:      OpTypeSqrt,
	_OpTypeLowerName[921:925]: OpTypeSqrt,
	_OpTypeName[925:928]:      OpTypeSub,
	_OpTypeLowerName[925:928]: OpTypeSub,
	_OpTypeName[928:932]:      OpTypeTanh,
	_OpTypeLowerName[928:932]: OpTypeTanh,
	_OpTypeName[932:941]:      OpTypeTranspose,
	_OpTypeLowerName[932:941]: OpTypeTranspose,
	_OpTypeName[941:946]:      OpTypeWhere,
	_OpTypeLowerName[941:946]: OpTypeWhere,
	_OpTypeName[946:950]:      OpTypeLast,
	_OpTypeLowerName[946:950]: OpTypeLast,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:18],
	_OpTypeName[18:28],
	_OpTypeName[28:38],
	_OpTypeName[38:50],
	_OpTypeName[50:65],
	_OpTypeName[65:86],
	_OpTypeName[86:106],
	_OpTypeName[106:123],
	_OpTypeName[123:131],
	_OpTypeName[131:134],
	_OpTypeName[134:137],
	_OpTypeName[137:146],
	_OpTypeName[146:153],
	_OpTypeName[153:163],
	_OpTypeName[163:173],
	_OpTypeName[173:182],
	_OpTypeName[182:192],
	_OpTypeName[192:201],
	_OpTypeName[201:215],
	_OpTypeName[215:219],
	_OpTypeName[219:222],
	_OpTypeName[222:229],
	_OpTypeName[229:240],
	_OpTypeName[240:244],
	_OpTypeName[244:262],
	_OpTypeName[262:274],
	_OpTypeName[274:277],
	_OpTypeName[277:280],
	_OpTypeName[280:283],
	_OpTypeName[283:293],
	_OpTypeName[293:305],
	_OpTypeName[305:323],
	_OpTypeName[323:328],
	_OpTypeName[328:343],
	_OpTypeName[343:346],
	_OpTypeName[346:349],
	_OpTypeName[349:354],
	_OpTypeName[354:357],
	_OpTypeName[357:362],
	_OpTypeName[362:368],
	_OpTypeName[368:382],
	_OpTypeName[382:406],
	_OpTypeName[406:417],
	_OpTypeName[417:438],
	_OpTypeName[438:442],
	_OpTypeName[442:446],
	_OpTypeName[446:454],
	_OpTypeName[454:465],
	_OpTypeName[465:486],
	_OpTypeName[486:494],
	_OpTypeName[494:512],
	_OpTypeName[512:515],
	_OpTypeName[515:520],
	_OpTypeName[520:530],
	_OpTypeName[530:540],
	_OpTypeName[540:549],
	_OpTypeName[549:559],
	_OpTypeName[559:567],
	_OpTypeName[567:570],
	_OpTypeName[570:573],
	_OpTypeName[573:576],
	_OpTypeName[576:579],
	_OpTypeName[579:587],
	_OpTypeName[587:605],
	_OpTypeName[605:608],
	_OpTypeName[608:611],
	_OpTypeName[611:615],
	_OpTypeName[615:631],
	_OpTypeName[631:646],
	_OpTypeName[646:662],
	_OpTypeName[662:678],
	_OpTypeName[678:693],
	_OpTypeName[693:709],
	_OpTypeName[709:718],
	_OpTypeName[718:727],
	_OpTypeName[727:740],
	_OpTypeName[740:749],
	_OpTypeName[749:752],
	_OpTypeName[752:759],
	_OpTypeName[759:766],
	_OpTypeName[766:771],
	_OpTypeName[771:776],
	_OpTypeName[776:786],
	_OpTypeName[786:796],
	_OpTypeName[796:806],
	_OpTypeName[806:825],
	_OpTypeName[825:844],
	_OpTypeName[844:863],
	_OpTypeName[863:872],
	_OpTypeName[872:892],
	_OpTypeName[892:909],
	_OpTypeName[909:913],
	_OpTypeName[913:916],
	_OpTypeName[916:921],
	_OpTypeName[921:925],
	_OpTypeName[925:928],
	_OpTypeName[928:932],
	_OpTypeName[932:941],
	_OpTypeName[941:946],
	_OpTypeName[946:950],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
