package main

import (
	"bytes"
	"fmt"
	"github.com/gomlx/gomlx/cmd/backends_generator/parsexlabuilder"
	"github.com/gomlx/gomlx/types/xslices"
	"github.com/janpfeifer/must"
	"go/ast"
	"os"
	"os/exec"
	"slices"
	"strings"
	"text/template"
)

const (
	standardOpsXlaFile = "gen_standard_ops.go"
)

var (
	standardOpsTemplate = template.Must(template.New(standardOpsXlaFile).Parse(`
/***** File generated by ./cmd/backends_codegen, based on github.com/gomlx/gopjrt. Don't edit it directly. *****/

package xla

import (
	"github.com/gomlx/gomlx/backends"
	"github.com/gomlx/gomlx/types/shapes"
	"github.com/gomlx/gomlx/types/xslices"
	"github.com/gomlx/gopjrt/dtypes"
	"github.com/gomlx/gopjrt/xlabuilder"
	"github.com/pkg/errors"
)

{{range .}}
{{range .Comments}}// {{.}}
{{end}}func (b *Builder) {{.Name}}({{range .Parameters}}{{.Names}} {{.Type}}, {{end}}) backends.Op { {{range .ValuesSpec}}
{{.}}{{end}}
	xla_result, err := xlabuilder.{{.Name}}({{range.Values}}{{.}}, {{end}})
	if err != nil {
		panic(errors.WithMessagef(err, "Backend %q: failed {{.Name}}", BackendName))
	}
	return xla_result
}
{{end}}
`))

	convertOpTemplate = template.Must(template.New("convertOp").Parse(
		`	xla_{{.}} := b.verifyAndCastOp({{.}}, "{{.}}")`))

	convertOpListTemplate = template.Must(template.New("convertOpList").Parse(
		`	xla_{{.}} := xslices.Map({{.}}, func (op backends.Op) *xlabuilder.Op { return b.verifyAndCastOp(op, "{{.}}") })`))

	convertShapeTemplate = template.Must(template.New("convertShape").Parse(
		`	var xla_{{.}} = shapeToXShape({{.}})`))

	convertConvolveAxesConfigTemplate = template.Must(template.New("convertConvolveAxesConfig").Parse(
		`	var xla_{{.}} = convertConvolveAxesConfig({{.}})`))

	convertPadAxisListTemplate = template.Must(template.New("convertPadAxisList").Parse(
		`	var xla_{{.}} []xlabuilder.PadAxis
	for _, pad := range {{.}} {
		xla_{{.}} = append(xla_{{.}}, convertPadAxis(pad))
	}`))

	convertFFTTypeTemplate = template.Must(template.New("convertFFTType").Parse(
		`	var xla_{{.}} = convertFFTType({{.}})`))
)

type FuncInfo struct {
	Name       string
	Parameters []*ParamInfo
	ValuesSpec []string
	Values     []string
	Comments   []string
}

type ParamInfo struct {
	Names, Type string
}

func selectAndScatterComments(funcName string) []string {
	aggregation := funcName[len(funcName)-3:]
	return []string{
		funcName + " runs windows (similar to ReduceWindow) over the operand, selects values to updates the output (like ScatterAdd)",
		"It selects the values in the window such that it works as reverse for Scatter" + aggregation + ".",
		"See details in https://openxla.org/xla/operation_semantics#selectandscatter",
	}
}

func execTemplate(tmpl *template.Template, data any) string {
	buf := &bytes.Buffer{}
	must.M(tmpl.Execute(buf, data))
	return buf.String()
}

// GenerateStandardOpsImplementation generates the XLA implementation for the various standard ops, that just calls
// the underlying xlabuilder function.
// The rest of the ops are maintained manually.
func GenerateStandardOpsImplementation(extractor *parsexlabuilder.NodeTextExtractor, xlaBuilderPkg *ast.Package) {
	var standardOps []FuncInfo
	parsexlabuilder.EnumerateStandardOpsFunctions(extractor, xlaBuilderPkg, func(funcDecl *ast.FuncDecl) {
		fi := FuncInfo{
			Name: funcDecl.Name.Name,
			Comments: slices.DeleteFunc(
				strings.Split(funcDecl.Doc.Text(), "\n"),
				func(s string) bool {
					return s == "" || s == "The op is created on the same XlaBuilder as used for x." ||
						strings.Index(s, "ScatterCustom") != -1
				}),
		}
		for _, param := range funcDecl.Type.Params.List {
			if param.Names[0].Name == "builder" {
				// builder is not needed by the API, since the builder is given by the object implementing the interface.
				fi.Values = append(fi.Values, "b.builder")
				continue
			}
			names := xslices.Map(param.Names, func(ident *ast.Ident) string { return ident.Name })
			pi := &ParamInfo{
				Names: strings.Join(names, ", "),
				Type:  extractor.Get(param.Type),
			}
			if pi.Type == "*Op" {
				pi.Type = "backends.Op"
			} else if pi.Type == "...*Op" {
				pi.Type = "...backends.Op"
			} else if pi.Type == "Shape" {
				pi.Type = "shapes.Shape"
			} else if pi.Type == "ConvolveAxesConfig" {
				pi.Type = "backends.ConvolveAxesConfig"
			} else if pi.Type == "...PadAxis" {
				pi.Type = "...backends.PadAxis"
			} else if pi.Type == "protos.FftType" {
				pi.Type = "backends.FFTType"
			}
			fi.Parameters = append(fi.Parameters, pi)

			// Encode conversions from backends.Builder API to xlabuilder API.
			if pi.Type == "backends.Op" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertOpTemplate, name))
					names[ii] = "xla_" + name
				}
			} else if pi.Type == "shapes.Shape" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertShapeTemplate, name))
					names[ii] = "xla_" + name
				}
			} else if pi.Type == "...backends.Op" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertOpListTemplate, name))
					names[ii] = "xla_" + name + "..."
				}
			} else if pi.Type == "backends.ConvolveAxesConfig" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertConvolveAxesConfigTemplate, name))
					names[ii] = "xla_" + name
				}
			} else if pi.Type == "...backends.PadAxis" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertPadAxisListTemplate, name))
					names[ii] = "xla_" + name + "..."
				}
			} else if pi.Type == "backends.FFTType" {
				for ii, name := range names {
					fi.ValuesSpec = append(fi.ValuesSpec, execTemplate(convertFFTTypeTemplate, name))
					names[ii] = "xla_" + name
				}
			} else if strings.HasPrefix(pi.Type, "...") {
				for ii, name := range names {
					names[ii] = name + "..."
				}
			}
			fi.Values = append(fi.Values, names...)
		}
		if strings.HasPrefix(fi.Name, "SelectAndScatter") {
			fi.Comments = selectAndScatterComments(fi.Name)
		}
		standardOps = append(standardOps, fi)
	})
	slices.SortFunc(standardOps, func(a, b FuncInfo) int { return strings.Compare(a.Name, b.Name) })

	fileName := standardOpsXlaFile
	f := must.M1(os.Create(fileName))

	must.M(standardOpsTemplate.Execute(f, standardOps))
	cmd := exec.Command("gofmt", "-w", fileName)
	fmt.Printf("\t%s\n", cmd)
	must.M(cmd.Run())
	fmt.Printf("\tGenerated %q based on github.com/gomlx/gopjrt/xlabuilder\n", fileName)
}
