// Code generated by "stringer -type NodeType -trimprefix NodeType gen_backend_ops.go"; DO NOT EDIT.

package graph

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeTypeInvalid-0]
	_ = x[NodeTypeSplitNode-1]
	_ = x[NodeTypeAbs-2]
	_ = x[NodeTypeAdd-3]
	_ = x[NodeTypeAnd-4]
	_ = x[NodeTypeArgMinMax-5]
	_ = x[NodeTypeBatchNormForInference-6]
	_ = x[NodeTypeBatchNormForTraining-7]
	_ = x[NodeTypeBatchNormGradient-8]
	_ = x[NodeTypeBroadcast-9]
	_ = x[NodeTypeBroadcastInDim-10]
	_ = x[NodeTypeCeil-11]
	_ = x[NodeTypeClz-12]
	_ = x[NodeTypeComplex-13]
	_ = x[NodeTypeConcatenate-14]
	_ = x[NodeTypeConj-15]
	_ = x[NodeTypeConstant-16]
	_ = x[NodeTypeConvGeneralDilated-17]
	_ = x[NodeTypeConvertDType-18]
	_ = x[NodeTypeCos-19]
	_ = x[NodeTypeDiv-20]
	_ = x[NodeTypeDot-21]
	_ = x[NodeTypeDotGeneral-22]
	_ = x[NodeTypeEqual-23]
	_ = x[NodeTypeEqualTotalOrder-24]
	_ = x[NodeTypeExp-25]
	_ = x[NodeTypeExpm1-26]
	_ = x[NodeTypeFFT-27]
	_ = x[NodeTypeFloor-28]
	_ = x[NodeTypeGather-29]
	_ = x[NodeTypeGreaterOrEqual-30]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-31]
	_ = x[NodeTypeGreaterThan-32]
	_ = x[NodeTypeGreaterThanTotalOrder-33]
	_ = x[NodeTypeIdentity-34]
	_ = x[NodeTypeImag-35]
	_ = x[NodeTypeIota-36]
	_ = x[NodeTypeLessOrEqual-37]
	_ = x[NodeTypeLessOrEqualTotalOrder-38]
	_ = x[NodeTypeLessThan-39]
	_ = x[NodeTypeLessThanTotalOrder-40]
	_ = x[NodeTypeLog-41]
	_ = x[NodeTypeLog1p-42]
	_ = x[NodeTypeLogicalNot-43]
	_ = x[NodeTypeLogistic-44]
	_ = x[NodeTypeMax-45]
	_ = x[NodeTypeMin-46]
	_ = x[NodeTypeMul-47]
	_ = x[NodeTypeNeg-48]
	_ = x[NodeTypeNotEqual-49]
	_ = x[NodeTypeNotEqualTotalOrder-50]
	_ = x[NodeTypeOr-51]
	_ = x[NodeTypePad-52]
	_ = x[NodeTypeParameter-53]
	_ = x[NodeTypePow-54]
	_ = x[NodeTypeReal-55]
	_ = x[NodeTypeReduceMax-56]
	_ = x[NodeTypeReduceMin-57]
	_ = x[NodeTypeReduceProduct-58]
	_ = x[NodeTypeReduceSum-59]
	_ = x[NodeTypeReduceWindow-60]
	_ = x[NodeTypeRem-61]
	_ = x[NodeTypeReshape-62]
	_ = x[NodeTypeReverse-63]
	_ = x[NodeTypeRngBitGenerator-64]
	_ = x[NodeTypeRound-65]
	_ = x[NodeTypeRsqrt-66]
	_ = x[NodeTypeScatterAdd-67]
	_ = x[NodeTypeScatterMax-68]
	_ = x[NodeTypeScatterMin-69]
	_ = x[NodeTypeSelectAndScatterMax-70]
	_ = x[NodeTypeSelectAndScatterMin-71]
	_ = x[NodeTypeSelectAndScatterSum-72]
	_ = x[NodeTypeSign-73]
	_ = x[NodeTypeSin-74]
	_ = x[NodeTypeSlice-75]
	_ = x[NodeTypeSqrt-76]
	_ = x[NodeTypeSub-77]
	_ = x[NodeTypeTanh-78]
	_ = x[NodeTypeTranspose-79]
	_ = x[NodeTypeWhere-80]
	_ = x[NodeTypeXor-81]
}

const _NodeType_name = "InvalidSplitNodeAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralEqualEqualTotalOrderExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeType_index = [...]uint16{0, 7, 16, 19, 22, 25, 34, 55, 75, 92, 101, 115, 119, 122, 129, 140, 144, 152, 170, 182, 185, 188, 191, 201, 206, 221, 224, 229, 232, 237, 243, 257, 281, 292, 313, 321, 325, 329, 340, 361, 369, 387, 390, 395, 405, 413, 416, 419, 422, 425, 433, 451, 453, 456, 465, 468, 472, 481, 490, 503, 512, 524, 527, 534, 541, 556, 561, 566, 576, 586, 596, 615, 634, 653, 657, 660, 665, 669, 672, 676, 685, 690, 693}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
