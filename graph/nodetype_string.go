// Code generated by "stringer -type NodeType -trimprefix NodeType gen_backend_ops.go"; DO NOT EDIT.

package graph

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeTypeInvalid-0]
	_ = x[NodeTypeAbs-1]
	_ = x[NodeTypeAdd-2]
	_ = x[NodeTypeAnd-3]
	_ = x[NodeTypeArgMinMax-4]
	_ = x[NodeTypeBatchNormInference-5]
	_ = x[NodeTypeBroadcast-6]
	_ = x[NodeTypeBroadcastInDim-7]
	_ = x[NodeTypeCeil-8]
	_ = x[NodeTypeClz-9]
	_ = x[NodeTypeComplex-10]
	_ = x[NodeTypeConcatenate-11]
	_ = x[NodeTypeConj-12]
	_ = x[NodeTypeConstant-13]
	_ = x[NodeTypeConvGeneralDilated-14]
	_ = x[NodeTypeConvertDType-15]
	_ = x[NodeTypeCos-16]
	_ = x[NodeTypeDiv-17]
	_ = x[NodeTypeDot-18]
	_ = x[NodeTypeDotGeneral-19]
	_ = x[NodeTypeEqual-20]
	_ = x[NodeTypeEqualTotalOrder-21]
	_ = x[NodeTypeExp-22]
	_ = x[NodeTypeExpm1-23]
	_ = x[NodeTypeFFT-24]
	_ = x[NodeTypeFloor-25]
	_ = x[NodeTypeGather-26]
	_ = x[NodeTypeGreaterOrEqual-27]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-28]
	_ = x[NodeTypeGreaterThan-29]
	_ = x[NodeTypeGreaterThanTotalOrder-30]
	_ = x[NodeTypeIdentity-31]
	_ = x[NodeTypeImag-32]
	_ = x[NodeTypeIota-33]
	_ = x[NodeTypeLessOrEqual-34]
	_ = x[NodeTypeLessOrEqualTotalOrder-35]
	_ = x[NodeTypeLessThan-36]
	_ = x[NodeTypeLessThanTotalOrder-37]
	_ = x[NodeTypeLog-38]
	_ = x[NodeTypeLog1p-39]
	_ = x[NodeTypeLogicalNot-40]
	_ = x[NodeTypeLogistic-41]
	_ = x[NodeTypeMax-42]
	_ = x[NodeTypeMin-43]
	_ = x[NodeTypeMul-44]
	_ = x[NodeTypeNeg-45]
	_ = x[NodeTypeNotEqual-46]
	_ = x[NodeTypeNotEqualTotalOrder-47]
	_ = x[NodeTypeOr-48]
	_ = x[NodeTypePad-49]
	_ = x[NodeTypeParameter-50]
	_ = x[NodeTypePow-51]
	_ = x[NodeTypeReal-52]
	_ = x[NodeTypeReduceMax-53]
	_ = x[NodeTypeReduceMin-54]
	_ = x[NodeTypeReduceProduct-55]
	_ = x[NodeTypeReduceSum-56]
	_ = x[NodeTypeRem-57]
	_ = x[NodeTypeReshape-58]
	_ = x[NodeTypeReverse-59]
	_ = x[NodeTypeRound-60]
	_ = x[NodeTypeRsqrt-61]
	_ = x[NodeTypeScatterAdd-62]
	_ = x[NodeTypeScatterMax-63]
	_ = x[NodeTypeScatterMin-64]
	_ = x[NodeTypeSelectAndScatterMax-65]
	_ = x[NodeTypeSelectAndScatterMin-66]
	_ = x[NodeTypeSelectAndScatterSum-67]
	_ = x[NodeTypeSign-68]
	_ = x[NodeTypeSin-69]
	_ = x[NodeTypeSlice-70]
	_ = x[NodeTypeSqrt-71]
	_ = x[NodeTypeSub-72]
	_ = x[NodeTypeTanh-73]
	_ = x[NodeTypeTranspose-74]
	_ = x[NodeTypeWhere-75]
	_ = x[NodeTypeXor-76]
}

const _NodeType_name = "InvalidAbsAddAndArgMinMaxBatchNormInferenceBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralEqualEqualTotalOrderExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeType_index = [...]uint16{0, 7, 10, 13, 16, 25, 43, 52, 66, 70, 73, 80, 91, 95, 103, 121, 133, 136, 139, 142, 152, 157, 172, 175, 180, 183, 188, 194, 208, 232, 243, 264, 272, 276, 280, 291, 312, 320, 338, 341, 346, 356, 364, 367, 370, 373, 376, 384, 402, 404, 407, 416, 419, 423, 432, 441, 454, 463, 466, 473, 480, 485, 490, 500, 510, 520, 539, 558, 577, 581, 584, 589, 593, 596, 600, 609, 614, 617}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
