// Code generated by "stringer -type NodeType -trimprefix NodeType gen_backend_ops.go"; DO NOT EDIT.

package graph

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeTypeInvalid-0]
	_ = x[NodeTypeAbs-1]
	_ = x[NodeTypeAdd-2]
	_ = x[NodeTypeAnd-3]
	_ = x[NodeTypeArgMinMax-4]
	_ = x[NodeTypeBatchNormInference-5]
	_ = x[NodeTypeBroadcast-6]
	_ = x[NodeTypeBroadcastInDim-7]
	_ = x[NodeTypeCeil-8]
	_ = x[NodeTypeClz-9]
	_ = x[NodeTypeComplex-10]
	_ = x[NodeTypeConcatenate-11]
	_ = x[NodeTypeConj-12]
	_ = x[NodeTypeConvGeneralDilated-13]
	_ = x[NodeTypeConvertDType-14]
	_ = x[NodeTypeCos-15]
	_ = x[NodeTypeDiv-16]
	_ = x[NodeTypeDot-17]
	_ = x[NodeTypeDotGeneral-18]
	_ = x[NodeTypeEqual-19]
	_ = x[NodeTypeEqualTotalOrder-20]
	_ = x[NodeTypeExp-21]
	_ = x[NodeTypeExpm1-22]
	_ = x[NodeTypeFFT-23]
	_ = x[NodeTypeFloor-24]
	_ = x[NodeTypeGather-25]
	_ = x[NodeTypeGreaterOrEqual-26]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-27]
	_ = x[NodeTypeGreaterThan-28]
	_ = x[NodeTypeGreaterThanTotalOrder-29]
	_ = x[NodeTypeImag-30]
	_ = x[NodeTypeIota-31]
	_ = x[NodeTypeLessOrEqual-32]
	_ = x[NodeTypeLessOrEqualTotalOrder-33]
	_ = x[NodeTypeLessThan-34]
	_ = x[NodeTypeLessThanTotalOrder-35]
	_ = x[NodeTypeLog-36]
	_ = x[NodeTypeLog1p-37]
	_ = x[NodeTypeLogicalNot-38]
	_ = x[NodeTypeLogistic-39]
	_ = x[NodeTypeMax-40]
	_ = x[NodeTypeMin-41]
	_ = x[NodeTypeMul-42]
	_ = x[NodeTypeNeg-43]
	_ = x[NodeTypeNotEqual-44]
	_ = x[NodeTypeNotEqualTotalOrder-45]
	_ = x[NodeTypeOr-46]
	_ = x[NodeTypePad-47]
	_ = x[NodeTypeParameter-48]
	_ = x[NodeTypePow-49]
	_ = x[NodeTypeReal-50]
	_ = x[NodeTypeReduceMax-51]
	_ = x[NodeTypeReduceMin-52]
	_ = x[NodeTypeReduceProduct-53]
	_ = x[NodeTypeReduceSum-54]
	_ = x[NodeTypeRem-55]
	_ = x[NodeTypeReshape-56]
	_ = x[NodeTypeReverse-57]
	_ = x[NodeTypeRound-58]
	_ = x[NodeTypeRsqrt-59]
	_ = x[NodeTypeScatterAdd-60]
	_ = x[NodeTypeScatterMax-61]
	_ = x[NodeTypeScatterMin-62]
	_ = x[NodeTypeSelectAndScatterMax-63]
	_ = x[NodeTypeSelectAndScatterMin-64]
	_ = x[NodeTypeSelectAndScatterSum-65]
	_ = x[NodeTypeSign-66]
	_ = x[NodeTypeSin-67]
	_ = x[NodeTypeSlice-68]
	_ = x[NodeTypeSqrt-69]
	_ = x[NodeTypeSub-70]
	_ = x[NodeTypeTanh-71]
	_ = x[NodeTypeTranspose-72]
	_ = x[NodeTypeWhere-73]
	_ = x[NodeTypeXor-74]
}

const _NodeType_name = "InvalidAbsAddAndArgMinMaxBatchNormInferenceBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralDilatedConvertDTypeCosDivDotDotGeneralEqualEqualTotalOrderExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeType_index = [...]uint16{0, 7, 10, 13, 16, 25, 43, 52, 66, 70, 73, 80, 91, 95, 113, 125, 128, 131, 134, 144, 149, 164, 167, 172, 175, 180, 186, 200, 224, 235, 256, 260, 264, 275, 296, 304, 322, 325, 330, 340, 348, 351, 354, 357, 360, 368, 386, 388, 391, 400, 403, 407, 416, 425, 438, 447, 450, 457, 464, 469, 474, 484, 494, 504, 523, 542, 561, 565, 568, 573, 577, 580, 584, 593, 598, 601}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
