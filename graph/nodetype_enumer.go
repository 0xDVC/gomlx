// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralEqualEqualTotalOrderExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 25, 34, 55, 75, 92, 101, 115, 119, 122, 129, 140, 144, 152, 170, 182, 185, 188, 191, 201, 206, 221, 224, 229, 232, 237, 243, 257, 281, 292, 313, 321, 325, 329, 340, 361, 369, 387, 390, 395, 405, 413, 416, 419, 422, 425, 433, 451, 453, 456, 465, 468, 472, 481, 490, 503, 512, 524, 527, 534, 541, 556, 561, 566, 576, 586, 596, 615, 634, 653, 657, 660, 665, 669, 672, 676, 685, 690, 693}

const _NodeTypeLowerName = "invalidsplitnodeabsaddandargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneraldilatedconvertdtypecosdivdotdotgeneralequalequaltotalorderexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotalessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalnotlogisticmaxminmulnegnotequalnotequaltotalorderorpadparameterpowrealreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscatteraddscattermaxscatterminselectandscattermaxselectandscatterminselectandscattersumsignsinslicesqrtsubtanhtransposewherexor"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeAnd-(4)]
	_ = x[NodeTypeArgMinMax-(5)]
	_ = x[NodeTypeBatchNormForInference-(6)]
	_ = x[NodeTypeBatchNormForTraining-(7)]
	_ = x[NodeTypeBatchNormGradient-(8)]
	_ = x[NodeTypeBroadcast-(9)]
	_ = x[NodeTypeBroadcastInDim-(10)]
	_ = x[NodeTypeCeil-(11)]
	_ = x[NodeTypeClz-(12)]
	_ = x[NodeTypeComplex-(13)]
	_ = x[NodeTypeConcatenate-(14)]
	_ = x[NodeTypeConj-(15)]
	_ = x[NodeTypeConstant-(16)]
	_ = x[NodeTypeConvGeneralDilated-(17)]
	_ = x[NodeTypeConvertDType-(18)]
	_ = x[NodeTypeCos-(19)]
	_ = x[NodeTypeDiv-(20)]
	_ = x[NodeTypeDot-(21)]
	_ = x[NodeTypeDotGeneral-(22)]
	_ = x[NodeTypeEqual-(23)]
	_ = x[NodeTypeEqualTotalOrder-(24)]
	_ = x[NodeTypeExp-(25)]
	_ = x[NodeTypeExpm1-(26)]
	_ = x[NodeTypeFFT-(27)]
	_ = x[NodeTypeFloor-(28)]
	_ = x[NodeTypeGather-(29)]
	_ = x[NodeTypeGreaterOrEqual-(30)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(31)]
	_ = x[NodeTypeGreaterThan-(32)]
	_ = x[NodeTypeGreaterThanTotalOrder-(33)]
	_ = x[NodeTypeIdentity-(34)]
	_ = x[NodeTypeImag-(35)]
	_ = x[NodeTypeIota-(36)]
	_ = x[NodeTypeLessOrEqual-(37)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(38)]
	_ = x[NodeTypeLessThan-(39)]
	_ = x[NodeTypeLessThanTotalOrder-(40)]
	_ = x[NodeTypeLog-(41)]
	_ = x[NodeTypeLog1p-(42)]
	_ = x[NodeTypeLogicalNot-(43)]
	_ = x[NodeTypeLogistic-(44)]
	_ = x[NodeTypeMax-(45)]
	_ = x[NodeTypeMin-(46)]
	_ = x[NodeTypeMul-(47)]
	_ = x[NodeTypeNeg-(48)]
	_ = x[NodeTypeNotEqual-(49)]
	_ = x[NodeTypeNotEqualTotalOrder-(50)]
	_ = x[NodeTypeOr-(51)]
	_ = x[NodeTypePad-(52)]
	_ = x[NodeTypeParameter-(53)]
	_ = x[NodeTypePow-(54)]
	_ = x[NodeTypeReal-(55)]
	_ = x[NodeTypeReduceMax-(56)]
	_ = x[NodeTypeReduceMin-(57)]
	_ = x[NodeTypeReduceProduct-(58)]
	_ = x[NodeTypeReduceSum-(59)]
	_ = x[NodeTypeReduceWindow-(60)]
	_ = x[NodeTypeRem-(61)]
	_ = x[NodeTypeReshape-(62)]
	_ = x[NodeTypeReverse-(63)]
	_ = x[NodeTypeRngBitGenerator-(64)]
	_ = x[NodeTypeRound-(65)]
	_ = x[NodeTypeRsqrt-(66)]
	_ = x[NodeTypeScatterAdd-(67)]
	_ = x[NodeTypeScatterMax-(68)]
	_ = x[NodeTypeScatterMin-(69)]
	_ = x[NodeTypeSelectAndScatterMax-(70)]
	_ = x[NodeTypeSelectAndScatterMin-(71)]
	_ = x[NodeTypeSelectAndScatterSum-(72)]
	_ = x[NodeTypeSign-(73)]
	_ = x[NodeTypeSin-(74)]
	_ = x[NodeTypeSlice-(75)]
	_ = x[NodeTypeSqrt-(76)]
	_ = x[NodeTypeSub-(77)]
	_ = x[NodeTypeTanh-(78)]
	_ = x[NodeTypeTranspose-(79)]
	_ = x[NodeTypeWhere-(80)]
	_ = x[NodeTypeXor-(81)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeAnd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneralDilated, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalNot, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypeOr, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterAdd, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere, NodeTypeXor}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:25]:        NodeTypeAnd,
	_NodeTypeLowerName[22:25]:   NodeTypeAnd,
	_NodeTypeName[25:34]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[25:34]:   NodeTypeArgMinMax,
	_NodeTypeName[34:55]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[34:55]:   NodeTypeBatchNormForInference,
	_NodeTypeName[55:75]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[55:75]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[75:92]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[75:92]:   NodeTypeBatchNormGradient,
	_NodeTypeName[92:101]:       NodeTypeBroadcast,
	_NodeTypeLowerName[92:101]:  NodeTypeBroadcast,
	_NodeTypeName[101:115]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[101:115]: NodeTypeBroadcastInDim,
	_NodeTypeName[115:119]:      NodeTypeCeil,
	_NodeTypeLowerName[115:119]: NodeTypeCeil,
	_NodeTypeName[119:122]:      NodeTypeClz,
	_NodeTypeLowerName[119:122]: NodeTypeClz,
	_NodeTypeName[122:129]:      NodeTypeComplex,
	_NodeTypeLowerName[122:129]: NodeTypeComplex,
	_NodeTypeName[129:140]:      NodeTypeConcatenate,
	_NodeTypeLowerName[129:140]: NodeTypeConcatenate,
	_NodeTypeName[140:144]:      NodeTypeConj,
	_NodeTypeLowerName[140:144]: NodeTypeConj,
	_NodeTypeName[144:152]:      NodeTypeConstant,
	_NodeTypeLowerName[144:152]: NodeTypeConstant,
	_NodeTypeName[152:170]:      NodeTypeConvGeneralDilated,
	_NodeTypeLowerName[152:170]: NodeTypeConvGeneralDilated,
	_NodeTypeName[170:182]:      NodeTypeConvertDType,
	_NodeTypeLowerName[170:182]: NodeTypeConvertDType,
	_NodeTypeName[182:185]:      NodeTypeCos,
	_NodeTypeLowerName[182:185]: NodeTypeCos,
	_NodeTypeName[185:188]:      NodeTypeDiv,
	_NodeTypeLowerName[185:188]: NodeTypeDiv,
	_NodeTypeName[188:191]:      NodeTypeDot,
	_NodeTypeLowerName[188:191]: NodeTypeDot,
	_NodeTypeName[191:201]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[191:201]: NodeTypeDotGeneral,
	_NodeTypeName[201:206]:      NodeTypeEqual,
	_NodeTypeLowerName[201:206]: NodeTypeEqual,
	_NodeTypeName[206:221]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[206:221]: NodeTypeEqualTotalOrder,
	_NodeTypeName[221:224]:      NodeTypeExp,
	_NodeTypeLowerName[221:224]: NodeTypeExp,
	_NodeTypeName[224:229]:      NodeTypeExpm1,
	_NodeTypeLowerName[224:229]: NodeTypeExpm1,
	_NodeTypeName[229:232]:      NodeTypeFFT,
	_NodeTypeLowerName[229:232]: NodeTypeFFT,
	_NodeTypeName[232:237]:      NodeTypeFloor,
	_NodeTypeLowerName[232:237]: NodeTypeFloor,
	_NodeTypeName[237:243]:      NodeTypeGather,
	_NodeTypeLowerName[237:243]: NodeTypeGather,
	_NodeTypeName[243:257]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[243:257]: NodeTypeGreaterOrEqual,
	_NodeTypeName[257:281]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[257:281]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[281:292]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[281:292]: NodeTypeGreaterThan,
	_NodeTypeName[292:313]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[292:313]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[313:321]:      NodeTypeIdentity,
	_NodeTypeLowerName[313:321]: NodeTypeIdentity,
	_NodeTypeName[321:325]:      NodeTypeImag,
	_NodeTypeLowerName[321:325]: NodeTypeImag,
	_NodeTypeName[325:329]:      NodeTypeIota,
	_NodeTypeLowerName[325:329]: NodeTypeIota,
	_NodeTypeName[329:340]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[329:340]: NodeTypeLessOrEqual,
	_NodeTypeName[340:361]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[340:361]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[361:369]:      NodeTypeLessThan,
	_NodeTypeLowerName[361:369]: NodeTypeLessThan,
	_NodeTypeName[369:387]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[369:387]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[387:390]:      NodeTypeLog,
	_NodeTypeLowerName[387:390]: NodeTypeLog,
	_NodeTypeName[390:395]:      NodeTypeLog1p,
	_NodeTypeLowerName[390:395]: NodeTypeLog1p,
	_NodeTypeName[395:405]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[395:405]: NodeTypeLogicalNot,
	_NodeTypeName[405:413]:      NodeTypeLogistic,
	_NodeTypeLowerName[405:413]: NodeTypeLogistic,
	_NodeTypeName[413:416]:      NodeTypeMax,
	_NodeTypeLowerName[413:416]: NodeTypeMax,
	_NodeTypeName[416:419]:      NodeTypeMin,
	_NodeTypeLowerName[416:419]: NodeTypeMin,
	_NodeTypeName[419:422]:      NodeTypeMul,
	_NodeTypeLowerName[419:422]: NodeTypeMul,
	_NodeTypeName[422:425]:      NodeTypeNeg,
	_NodeTypeLowerName[422:425]: NodeTypeNeg,
	_NodeTypeName[425:433]:      NodeTypeNotEqual,
	_NodeTypeLowerName[425:433]: NodeTypeNotEqual,
	_NodeTypeName[433:451]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[433:451]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[451:453]:      NodeTypeOr,
	_NodeTypeLowerName[451:453]: NodeTypeOr,
	_NodeTypeName[453:456]:      NodeTypePad,
	_NodeTypeLowerName[453:456]: NodeTypePad,
	_NodeTypeName[456:465]:      NodeTypeParameter,
	_NodeTypeLowerName[456:465]: NodeTypeParameter,
	_NodeTypeName[465:468]:      NodeTypePow,
	_NodeTypeLowerName[465:468]: NodeTypePow,
	_NodeTypeName[468:472]:      NodeTypeReal,
	_NodeTypeLowerName[468:472]: NodeTypeReal,
	_NodeTypeName[472:481]:      NodeTypeReduceMax,
	_NodeTypeLowerName[472:481]: NodeTypeReduceMax,
	_NodeTypeName[481:490]:      NodeTypeReduceMin,
	_NodeTypeLowerName[481:490]: NodeTypeReduceMin,
	_NodeTypeName[490:503]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[490:503]: NodeTypeReduceProduct,
	_NodeTypeName[503:512]:      NodeTypeReduceSum,
	_NodeTypeLowerName[503:512]: NodeTypeReduceSum,
	_NodeTypeName[512:524]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[512:524]: NodeTypeReduceWindow,
	_NodeTypeName[524:527]:      NodeTypeRem,
	_NodeTypeLowerName[524:527]: NodeTypeRem,
	_NodeTypeName[527:534]:      NodeTypeReshape,
	_NodeTypeLowerName[527:534]: NodeTypeReshape,
	_NodeTypeName[534:541]:      NodeTypeReverse,
	_NodeTypeLowerName[534:541]: NodeTypeReverse,
	_NodeTypeName[541:556]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[541:556]: NodeTypeRngBitGenerator,
	_NodeTypeName[556:561]:      NodeTypeRound,
	_NodeTypeLowerName[556:561]: NodeTypeRound,
	_NodeTypeName[561:566]:      NodeTypeRsqrt,
	_NodeTypeLowerName[561:566]: NodeTypeRsqrt,
	_NodeTypeName[566:576]:      NodeTypeScatterAdd,
	_NodeTypeLowerName[566:576]: NodeTypeScatterAdd,
	_NodeTypeName[576:586]:      NodeTypeScatterMax,
	_NodeTypeLowerName[576:586]: NodeTypeScatterMax,
	_NodeTypeName[586:596]:      NodeTypeScatterMin,
	_NodeTypeLowerName[586:596]: NodeTypeScatterMin,
	_NodeTypeName[596:615]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[596:615]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[615:634]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[615:634]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[634:653]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[634:653]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[653:657]:      NodeTypeSign,
	_NodeTypeLowerName[653:657]: NodeTypeSign,
	_NodeTypeName[657:660]:      NodeTypeSin,
	_NodeTypeLowerName[657:660]: NodeTypeSin,
	_NodeTypeName[660:665]:      NodeTypeSlice,
	_NodeTypeLowerName[660:665]: NodeTypeSlice,
	_NodeTypeName[665:669]:      NodeTypeSqrt,
	_NodeTypeLowerName[665:669]: NodeTypeSqrt,
	_NodeTypeName[669:672]:      NodeTypeSub,
	_NodeTypeLowerName[669:672]: NodeTypeSub,
	_NodeTypeName[672:676]:      NodeTypeTanh,
	_NodeTypeLowerName[672:676]: NodeTypeTanh,
	_NodeTypeName[676:685]:      NodeTypeTranspose,
	_NodeTypeLowerName[676:685]: NodeTypeTranspose,
	_NodeTypeName[685:690]:      NodeTypeWhere,
	_NodeTypeLowerName[685:690]: NodeTypeWhere,
	_NodeTypeName[690:693]:      NodeTypeXor,
	_NodeTypeLowerName[690:693]: NodeTypeXor,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:25],
	_NodeTypeName[25:34],
	_NodeTypeName[34:55],
	_NodeTypeName[55:75],
	_NodeTypeName[75:92],
	_NodeTypeName[92:101],
	_NodeTypeName[101:115],
	_NodeTypeName[115:119],
	_NodeTypeName[119:122],
	_NodeTypeName[122:129],
	_NodeTypeName[129:140],
	_NodeTypeName[140:144],
	_NodeTypeName[144:152],
	_NodeTypeName[152:170],
	_NodeTypeName[170:182],
	_NodeTypeName[182:185],
	_NodeTypeName[185:188],
	_NodeTypeName[188:191],
	_NodeTypeName[191:201],
	_NodeTypeName[201:206],
	_NodeTypeName[206:221],
	_NodeTypeName[221:224],
	_NodeTypeName[224:229],
	_NodeTypeName[229:232],
	_NodeTypeName[232:237],
	_NodeTypeName[237:243],
	_NodeTypeName[243:257],
	_NodeTypeName[257:281],
	_NodeTypeName[281:292],
	_NodeTypeName[292:313],
	_NodeTypeName[313:321],
	_NodeTypeName[321:325],
	_NodeTypeName[325:329],
	_NodeTypeName[329:340],
	_NodeTypeName[340:361],
	_NodeTypeName[361:369],
	_NodeTypeName[369:387],
	_NodeTypeName[387:390],
	_NodeTypeName[390:395],
	_NodeTypeName[395:405],
	_NodeTypeName[405:413],
	_NodeTypeName[413:416],
	_NodeTypeName[416:419],
	_NodeTypeName[419:422],
	_NodeTypeName[422:425],
	_NodeTypeName[425:433],
	_NodeTypeName[433:451],
	_NodeTypeName[451:453],
	_NodeTypeName[453:456],
	_NodeTypeName[456:465],
	_NodeTypeName[465:468],
	_NodeTypeName[468:472],
	_NodeTypeName[472:481],
	_NodeTypeName[481:490],
	_NodeTypeName[490:503],
	_NodeTypeName[503:512],
	_NodeTypeName[512:524],
	_NodeTypeName[524:527],
	_NodeTypeName[527:534],
	_NodeTypeName[534:541],
	_NodeTypeName[541:556],
	_NodeTypeName[556:561],
	_NodeTypeName[561:566],
	_NodeTypeName[566:576],
	_NodeTypeName[576:586],
	_NodeTypeName[586:596],
	_NodeTypeName[596:615],
	_NodeTypeName[615:634],
	_NodeTypeName[634:653],
	_NodeTypeName[653:657],
	_NodeTypeName[657:660],
	_NodeTypeName[660:665],
	_NodeTypeName[665:669],
	_NodeTypeName[669:672],
	_NodeTypeName[672:676],
	_NodeTypeName[676:685],
	_NodeTypeName[685:690],
	_NodeTypeName[690:693],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
