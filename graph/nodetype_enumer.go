// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceAndReduceMaxReduceMinReduceOrReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 25, 34, 55, 75, 92, 101, 115, 119, 122, 129, 140, 144, 152, 170, 182, 185, 188, 191, 201, 213, 231, 236, 251, 254, 259, 262, 267, 273, 287, 311, 322, 343, 351, 355, 359, 370, 391, 399, 417, 420, 425, 435, 443, 446, 449, 452, 455, 463, 481, 483, 486, 495, 498, 502, 511, 520, 529, 537, 550, 559, 571, 574, 581, 588, 603, 608, 613, 623, 633, 643, 662, 681, 700, 704, 707, 712, 716, 719, 723, 732, 737, 740}

const _NodeTypeLowerName = "invalidsplitnodeabsaddandargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalorderexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotalessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalnotlogisticmaxminmulnegnotequalnotequaltotalorderorpadparameterpowrealreduceandreducemaxreduceminreduceorreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscatteraddscattermaxscatterminselectandscattermaxselectandscatterminselectandscattersumsignsinslicesqrtsubtanhtransposewherexor"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeAnd-(4)]
	_ = x[NodeTypeArgMinMax-(5)]
	_ = x[NodeTypeBatchNormForInference-(6)]
	_ = x[NodeTypeBatchNormForTraining-(7)]
	_ = x[NodeTypeBatchNormGradient-(8)]
	_ = x[NodeTypeBroadcast-(9)]
	_ = x[NodeTypeBroadcastInDim-(10)]
	_ = x[NodeTypeCeil-(11)]
	_ = x[NodeTypeClz-(12)]
	_ = x[NodeTypeComplex-(13)]
	_ = x[NodeTypeConcatenate-(14)]
	_ = x[NodeTypeConj-(15)]
	_ = x[NodeTypeConstant-(16)]
	_ = x[NodeTypeConvGeneralDilated-(17)]
	_ = x[NodeTypeConvertDType-(18)]
	_ = x[NodeTypeCos-(19)]
	_ = x[NodeTypeDiv-(20)]
	_ = x[NodeTypeDot-(21)]
	_ = x[NodeTypeDotGeneral-(22)]
	_ = x[NodeTypeDynamicSlice-(23)]
	_ = x[NodeTypeDynamicUpdateSlice-(24)]
	_ = x[NodeTypeEqual-(25)]
	_ = x[NodeTypeEqualTotalOrder-(26)]
	_ = x[NodeTypeExp-(27)]
	_ = x[NodeTypeExpm1-(28)]
	_ = x[NodeTypeFFT-(29)]
	_ = x[NodeTypeFloor-(30)]
	_ = x[NodeTypeGather-(31)]
	_ = x[NodeTypeGreaterOrEqual-(32)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(33)]
	_ = x[NodeTypeGreaterThan-(34)]
	_ = x[NodeTypeGreaterThanTotalOrder-(35)]
	_ = x[NodeTypeIdentity-(36)]
	_ = x[NodeTypeImag-(37)]
	_ = x[NodeTypeIota-(38)]
	_ = x[NodeTypeLessOrEqual-(39)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(40)]
	_ = x[NodeTypeLessThan-(41)]
	_ = x[NodeTypeLessThanTotalOrder-(42)]
	_ = x[NodeTypeLog-(43)]
	_ = x[NodeTypeLog1p-(44)]
	_ = x[NodeTypeLogicalNot-(45)]
	_ = x[NodeTypeLogistic-(46)]
	_ = x[NodeTypeMax-(47)]
	_ = x[NodeTypeMin-(48)]
	_ = x[NodeTypeMul-(49)]
	_ = x[NodeTypeNeg-(50)]
	_ = x[NodeTypeNotEqual-(51)]
	_ = x[NodeTypeNotEqualTotalOrder-(52)]
	_ = x[NodeTypeOr-(53)]
	_ = x[NodeTypePad-(54)]
	_ = x[NodeTypeParameter-(55)]
	_ = x[NodeTypePow-(56)]
	_ = x[NodeTypeReal-(57)]
	_ = x[NodeTypeReduceAnd-(58)]
	_ = x[NodeTypeReduceMax-(59)]
	_ = x[NodeTypeReduceMin-(60)]
	_ = x[NodeTypeReduceOr-(61)]
	_ = x[NodeTypeReduceProduct-(62)]
	_ = x[NodeTypeReduceSum-(63)]
	_ = x[NodeTypeReduceWindow-(64)]
	_ = x[NodeTypeRem-(65)]
	_ = x[NodeTypeReshape-(66)]
	_ = x[NodeTypeReverse-(67)]
	_ = x[NodeTypeRngBitGenerator-(68)]
	_ = x[NodeTypeRound-(69)]
	_ = x[NodeTypeRsqrt-(70)]
	_ = x[NodeTypeScatterAdd-(71)]
	_ = x[NodeTypeScatterMax-(72)]
	_ = x[NodeTypeScatterMin-(73)]
	_ = x[NodeTypeSelectAndScatterMax-(74)]
	_ = x[NodeTypeSelectAndScatterMin-(75)]
	_ = x[NodeTypeSelectAndScatterSum-(76)]
	_ = x[NodeTypeSign-(77)]
	_ = x[NodeTypeSin-(78)]
	_ = x[NodeTypeSlice-(79)]
	_ = x[NodeTypeSqrt-(80)]
	_ = x[NodeTypeSub-(81)]
	_ = x[NodeTypeTanh-(82)]
	_ = x[NodeTypeTranspose-(83)]
	_ = x[NodeTypeWhere-(84)]
	_ = x[NodeTypeXor-(85)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeAnd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneralDilated, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalNot, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypeOr, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceAnd, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceOr, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterAdd, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere, NodeTypeXor}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:25]:        NodeTypeAnd,
	_NodeTypeLowerName[22:25]:   NodeTypeAnd,
	_NodeTypeName[25:34]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[25:34]:   NodeTypeArgMinMax,
	_NodeTypeName[34:55]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[34:55]:   NodeTypeBatchNormForInference,
	_NodeTypeName[55:75]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[55:75]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[75:92]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[75:92]:   NodeTypeBatchNormGradient,
	_NodeTypeName[92:101]:       NodeTypeBroadcast,
	_NodeTypeLowerName[92:101]:  NodeTypeBroadcast,
	_NodeTypeName[101:115]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[101:115]: NodeTypeBroadcastInDim,
	_NodeTypeName[115:119]:      NodeTypeCeil,
	_NodeTypeLowerName[115:119]: NodeTypeCeil,
	_NodeTypeName[119:122]:      NodeTypeClz,
	_NodeTypeLowerName[119:122]: NodeTypeClz,
	_NodeTypeName[122:129]:      NodeTypeComplex,
	_NodeTypeLowerName[122:129]: NodeTypeComplex,
	_NodeTypeName[129:140]:      NodeTypeConcatenate,
	_NodeTypeLowerName[129:140]: NodeTypeConcatenate,
	_NodeTypeName[140:144]:      NodeTypeConj,
	_NodeTypeLowerName[140:144]: NodeTypeConj,
	_NodeTypeName[144:152]:      NodeTypeConstant,
	_NodeTypeLowerName[144:152]: NodeTypeConstant,
	_NodeTypeName[152:170]:      NodeTypeConvGeneralDilated,
	_NodeTypeLowerName[152:170]: NodeTypeConvGeneralDilated,
	_NodeTypeName[170:182]:      NodeTypeConvertDType,
	_NodeTypeLowerName[170:182]: NodeTypeConvertDType,
	_NodeTypeName[182:185]:      NodeTypeCos,
	_NodeTypeLowerName[182:185]: NodeTypeCos,
	_NodeTypeName[185:188]:      NodeTypeDiv,
	_NodeTypeLowerName[185:188]: NodeTypeDiv,
	_NodeTypeName[188:191]:      NodeTypeDot,
	_NodeTypeLowerName[188:191]: NodeTypeDot,
	_NodeTypeName[191:201]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[191:201]: NodeTypeDotGeneral,
	_NodeTypeName[201:213]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[201:213]: NodeTypeDynamicSlice,
	_NodeTypeName[213:231]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[213:231]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[231:236]:      NodeTypeEqual,
	_NodeTypeLowerName[231:236]: NodeTypeEqual,
	_NodeTypeName[236:251]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[236:251]: NodeTypeEqualTotalOrder,
	_NodeTypeName[251:254]:      NodeTypeExp,
	_NodeTypeLowerName[251:254]: NodeTypeExp,
	_NodeTypeName[254:259]:      NodeTypeExpm1,
	_NodeTypeLowerName[254:259]: NodeTypeExpm1,
	_NodeTypeName[259:262]:      NodeTypeFFT,
	_NodeTypeLowerName[259:262]: NodeTypeFFT,
	_NodeTypeName[262:267]:      NodeTypeFloor,
	_NodeTypeLowerName[262:267]: NodeTypeFloor,
	_NodeTypeName[267:273]:      NodeTypeGather,
	_NodeTypeLowerName[267:273]: NodeTypeGather,
	_NodeTypeName[273:287]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[273:287]: NodeTypeGreaterOrEqual,
	_NodeTypeName[287:311]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[287:311]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[311:322]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[311:322]: NodeTypeGreaterThan,
	_NodeTypeName[322:343]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[322:343]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[343:351]:      NodeTypeIdentity,
	_NodeTypeLowerName[343:351]: NodeTypeIdentity,
	_NodeTypeName[351:355]:      NodeTypeImag,
	_NodeTypeLowerName[351:355]: NodeTypeImag,
	_NodeTypeName[355:359]:      NodeTypeIota,
	_NodeTypeLowerName[355:359]: NodeTypeIota,
	_NodeTypeName[359:370]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[359:370]: NodeTypeLessOrEqual,
	_NodeTypeName[370:391]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[370:391]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[391:399]:      NodeTypeLessThan,
	_NodeTypeLowerName[391:399]: NodeTypeLessThan,
	_NodeTypeName[399:417]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[399:417]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[417:420]:      NodeTypeLog,
	_NodeTypeLowerName[417:420]: NodeTypeLog,
	_NodeTypeName[420:425]:      NodeTypeLog1p,
	_NodeTypeLowerName[420:425]: NodeTypeLog1p,
	_NodeTypeName[425:435]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[425:435]: NodeTypeLogicalNot,
	_NodeTypeName[435:443]:      NodeTypeLogistic,
	_NodeTypeLowerName[435:443]: NodeTypeLogistic,
	_NodeTypeName[443:446]:      NodeTypeMax,
	_NodeTypeLowerName[443:446]: NodeTypeMax,
	_NodeTypeName[446:449]:      NodeTypeMin,
	_NodeTypeLowerName[446:449]: NodeTypeMin,
	_NodeTypeName[449:452]:      NodeTypeMul,
	_NodeTypeLowerName[449:452]: NodeTypeMul,
	_NodeTypeName[452:455]:      NodeTypeNeg,
	_NodeTypeLowerName[452:455]: NodeTypeNeg,
	_NodeTypeName[455:463]:      NodeTypeNotEqual,
	_NodeTypeLowerName[455:463]: NodeTypeNotEqual,
	_NodeTypeName[463:481]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[463:481]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[481:483]:      NodeTypeOr,
	_NodeTypeLowerName[481:483]: NodeTypeOr,
	_NodeTypeName[483:486]:      NodeTypePad,
	_NodeTypeLowerName[483:486]: NodeTypePad,
	_NodeTypeName[486:495]:      NodeTypeParameter,
	_NodeTypeLowerName[486:495]: NodeTypeParameter,
	_NodeTypeName[495:498]:      NodeTypePow,
	_NodeTypeLowerName[495:498]: NodeTypePow,
	_NodeTypeName[498:502]:      NodeTypeReal,
	_NodeTypeLowerName[498:502]: NodeTypeReal,
	_NodeTypeName[502:511]:      NodeTypeReduceAnd,
	_NodeTypeLowerName[502:511]: NodeTypeReduceAnd,
	_NodeTypeName[511:520]:      NodeTypeReduceMax,
	_NodeTypeLowerName[511:520]: NodeTypeReduceMax,
	_NodeTypeName[520:529]:      NodeTypeReduceMin,
	_NodeTypeLowerName[520:529]: NodeTypeReduceMin,
	_NodeTypeName[529:537]:      NodeTypeReduceOr,
	_NodeTypeLowerName[529:537]: NodeTypeReduceOr,
	_NodeTypeName[537:550]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[537:550]: NodeTypeReduceProduct,
	_NodeTypeName[550:559]:      NodeTypeReduceSum,
	_NodeTypeLowerName[550:559]: NodeTypeReduceSum,
	_NodeTypeName[559:571]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[559:571]: NodeTypeReduceWindow,
	_NodeTypeName[571:574]:      NodeTypeRem,
	_NodeTypeLowerName[571:574]: NodeTypeRem,
	_NodeTypeName[574:581]:      NodeTypeReshape,
	_NodeTypeLowerName[574:581]: NodeTypeReshape,
	_NodeTypeName[581:588]:      NodeTypeReverse,
	_NodeTypeLowerName[581:588]: NodeTypeReverse,
	_NodeTypeName[588:603]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[588:603]: NodeTypeRngBitGenerator,
	_NodeTypeName[603:608]:      NodeTypeRound,
	_NodeTypeLowerName[603:608]: NodeTypeRound,
	_NodeTypeName[608:613]:      NodeTypeRsqrt,
	_NodeTypeLowerName[608:613]: NodeTypeRsqrt,
	_NodeTypeName[613:623]:      NodeTypeScatterAdd,
	_NodeTypeLowerName[613:623]: NodeTypeScatterAdd,
	_NodeTypeName[623:633]:      NodeTypeScatterMax,
	_NodeTypeLowerName[623:633]: NodeTypeScatterMax,
	_NodeTypeName[633:643]:      NodeTypeScatterMin,
	_NodeTypeLowerName[633:643]: NodeTypeScatterMin,
	_NodeTypeName[643:662]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[643:662]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[662:681]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[662:681]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[681:700]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[681:700]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[700:704]:      NodeTypeSign,
	_NodeTypeLowerName[700:704]: NodeTypeSign,
	_NodeTypeName[704:707]:      NodeTypeSin,
	_NodeTypeLowerName[704:707]: NodeTypeSin,
	_NodeTypeName[707:712]:      NodeTypeSlice,
	_NodeTypeLowerName[707:712]: NodeTypeSlice,
	_NodeTypeName[712:716]:      NodeTypeSqrt,
	_NodeTypeLowerName[712:716]: NodeTypeSqrt,
	_NodeTypeName[716:719]:      NodeTypeSub,
	_NodeTypeLowerName[716:719]: NodeTypeSub,
	_NodeTypeName[719:723]:      NodeTypeTanh,
	_NodeTypeLowerName[719:723]: NodeTypeTanh,
	_NodeTypeName[723:732]:      NodeTypeTranspose,
	_NodeTypeLowerName[723:732]: NodeTypeTranspose,
	_NodeTypeName[732:737]:      NodeTypeWhere,
	_NodeTypeLowerName[732:737]: NodeTypeWhere,
	_NodeTypeName[737:740]:      NodeTypeXor,
	_NodeTypeLowerName[737:740]: NodeTypeXor,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:25],
	_NodeTypeName[25:34],
	_NodeTypeName[34:55],
	_NodeTypeName[55:75],
	_NodeTypeName[75:92],
	_NodeTypeName[92:101],
	_NodeTypeName[101:115],
	_NodeTypeName[115:119],
	_NodeTypeName[119:122],
	_NodeTypeName[122:129],
	_NodeTypeName[129:140],
	_NodeTypeName[140:144],
	_NodeTypeName[144:152],
	_NodeTypeName[152:170],
	_NodeTypeName[170:182],
	_NodeTypeName[182:185],
	_NodeTypeName[185:188],
	_NodeTypeName[188:191],
	_NodeTypeName[191:201],
	_NodeTypeName[201:213],
	_NodeTypeName[213:231],
	_NodeTypeName[231:236],
	_NodeTypeName[236:251],
	_NodeTypeName[251:254],
	_NodeTypeName[254:259],
	_NodeTypeName[259:262],
	_NodeTypeName[262:267],
	_NodeTypeName[267:273],
	_NodeTypeName[273:287],
	_NodeTypeName[287:311],
	_NodeTypeName[311:322],
	_NodeTypeName[322:343],
	_NodeTypeName[343:351],
	_NodeTypeName[351:355],
	_NodeTypeName[355:359],
	_NodeTypeName[359:370],
	_NodeTypeName[370:391],
	_NodeTypeName[391:399],
	_NodeTypeName[399:417],
	_NodeTypeName[417:420],
	_NodeTypeName[420:425],
	_NodeTypeName[425:435],
	_NodeTypeName[435:443],
	_NodeTypeName[443:446],
	_NodeTypeName[446:449],
	_NodeTypeName[449:452],
	_NodeTypeName[452:455],
	_NodeTypeName[455:463],
	_NodeTypeName[463:481],
	_NodeTypeName[481:483],
	_NodeTypeName[483:486],
	_NodeTypeName[486:495],
	_NodeTypeName[495:498],
	_NodeTypeName[498:502],
	_NodeTypeName[502:511],
	_NodeTypeName[511:520],
	_NodeTypeName[520:529],
	_NodeTypeName[529:537],
	_NodeTypeName[537:550],
	_NodeTypeName[550:559],
	_NodeTypeName[559:571],
	_NodeTypeName[571:574],
	_NodeTypeName[574:581],
	_NodeTypeName[581:588],
	_NodeTypeName[588:603],
	_NodeTypeName[603:608],
	_NodeTypeName[608:613],
	_NodeTypeName[613:623],
	_NodeTypeName[623:633],
	_NodeTypeName[633:643],
	_NodeTypeName[643:662],
	_NodeTypeName[662:681],
	_NodeTypeName[681:700],
	_NodeTypeName[700:704],
	_NodeTypeName[704:707],
	_NodeTypeName[707:712],
	_NodeTypeName[712:716],
	_NodeTypeName[716:719],
	_NodeTypeName[719:723],
	_NodeTypeName[723:732],
	_NodeTypeName[732:737],
	_NodeTypeName[737:740],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
