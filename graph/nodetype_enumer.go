// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceAndReduceMaxReduceMinReduceOrReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 25, 34, 55, 75, 92, 100, 109, 123, 127, 130, 137, 148, 152, 160, 178, 190, 193, 196, 199, 209, 221, 239, 244, 259, 262, 265, 270, 273, 278, 284, 298, 322, 333, 354, 362, 366, 370, 378, 389, 410, 418, 436, 439, 444, 454, 462, 465, 468, 471, 474, 482, 500, 502, 505, 514, 517, 521, 530, 539, 548, 556, 569, 578, 590, 593, 600, 607, 622, 627, 632, 642, 652, 662, 681, 700, 719, 723, 726, 731, 735, 738, 742, 751, 756, 759}

const _NodeTypeLowerName = "invalidsplitnodeabsaddandargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalnotlogisticmaxminmulnegnotequalnotequaltotalorderorpadparameterpowrealreduceandreducemaxreduceminreduceorreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscatteraddscattermaxscatterminselectandscattermaxselectandscatterminselectandscattersumsignsinslicesqrtsubtanhtransposewherexor"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeAnd-(4)]
	_ = x[NodeTypeArgMinMax-(5)]
	_ = x[NodeTypeBatchNormForInference-(6)]
	_ = x[NodeTypeBatchNormForTraining-(7)]
	_ = x[NodeTypeBatchNormGradient-(8)]
	_ = x[NodeTypeBitCount-(9)]
	_ = x[NodeTypeBroadcast-(10)]
	_ = x[NodeTypeBroadcastInDim-(11)]
	_ = x[NodeTypeCeil-(12)]
	_ = x[NodeTypeClz-(13)]
	_ = x[NodeTypeComplex-(14)]
	_ = x[NodeTypeConcatenate-(15)]
	_ = x[NodeTypeConj-(16)]
	_ = x[NodeTypeConstant-(17)]
	_ = x[NodeTypeConvGeneralDilated-(18)]
	_ = x[NodeTypeConvertDType-(19)]
	_ = x[NodeTypeCos-(20)]
	_ = x[NodeTypeDiv-(21)]
	_ = x[NodeTypeDot-(22)]
	_ = x[NodeTypeDotGeneral-(23)]
	_ = x[NodeTypeDynamicSlice-(24)]
	_ = x[NodeTypeDynamicUpdateSlice-(25)]
	_ = x[NodeTypeEqual-(26)]
	_ = x[NodeTypeEqualTotalOrder-(27)]
	_ = x[NodeTypeErf-(28)]
	_ = x[NodeTypeExp-(29)]
	_ = x[NodeTypeExpm1-(30)]
	_ = x[NodeTypeFFT-(31)]
	_ = x[NodeTypeFloor-(32)]
	_ = x[NodeTypeGather-(33)]
	_ = x[NodeTypeGreaterOrEqual-(34)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(35)]
	_ = x[NodeTypeGreaterThan-(36)]
	_ = x[NodeTypeGreaterThanTotalOrder-(37)]
	_ = x[NodeTypeIdentity-(38)]
	_ = x[NodeTypeImag-(39)]
	_ = x[NodeTypeIota-(40)]
	_ = x[NodeTypeIsFinite-(41)]
	_ = x[NodeTypeLessOrEqual-(42)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(43)]
	_ = x[NodeTypeLessThan-(44)]
	_ = x[NodeTypeLessThanTotalOrder-(45)]
	_ = x[NodeTypeLog-(46)]
	_ = x[NodeTypeLog1p-(47)]
	_ = x[NodeTypeLogicalNot-(48)]
	_ = x[NodeTypeLogistic-(49)]
	_ = x[NodeTypeMax-(50)]
	_ = x[NodeTypeMin-(51)]
	_ = x[NodeTypeMul-(52)]
	_ = x[NodeTypeNeg-(53)]
	_ = x[NodeTypeNotEqual-(54)]
	_ = x[NodeTypeNotEqualTotalOrder-(55)]
	_ = x[NodeTypeOr-(56)]
	_ = x[NodeTypePad-(57)]
	_ = x[NodeTypeParameter-(58)]
	_ = x[NodeTypePow-(59)]
	_ = x[NodeTypeReal-(60)]
	_ = x[NodeTypeReduceAnd-(61)]
	_ = x[NodeTypeReduceMax-(62)]
	_ = x[NodeTypeReduceMin-(63)]
	_ = x[NodeTypeReduceOr-(64)]
	_ = x[NodeTypeReduceProduct-(65)]
	_ = x[NodeTypeReduceSum-(66)]
	_ = x[NodeTypeReduceWindow-(67)]
	_ = x[NodeTypeRem-(68)]
	_ = x[NodeTypeReshape-(69)]
	_ = x[NodeTypeReverse-(70)]
	_ = x[NodeTypeRngBitGenerator-(71)]
	_ = x[NodeTypeRound-(72)]
	_ = x[NodeTypeRsqrt-(73)]
	_ = x[NodeTypeScatterAdd-(74)]
	_ = x[NodeTypeScatterMax-(75)]
	_ = x[NodeTypeScatterMin-(76)]
	_ = x[NodeTypeSelectAndScatterMax-(77)]
	_ = x[NodeTypeSelectAndScatterMin-(78)]
	_ = x[NodeTypeSelectAndScatterSum-(79)]
	_ = x[NodeTypeSign-(80)]
	_ = x[NodeTypeSin-(81)]
	_ = x[NodeTypeSlice-(82)]
	_ = x[NodeTypeSqrt-(83)]
	_ = x[NodeTypeSub-(84)]
	_ = x[NodeTypeTanh-(85)]
	_ = x[NodeTypeTranspose-(86)]
	_ = x[NodeTypeWhere-(87)]
	_ = x[NodeTypeXor-(88)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeAnd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneralDilated, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalNot, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypeOr, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceAnd, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceOr, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterAdd, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere, NodeTypeXor}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:25]:        NodeTypeAnd,
	_NodeTypeLowerName[22:25]:   NodeTypeAnd,
	_NodeTypeName[25:34]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[25:34]:   NodeTypeArgMinMax,
	_NodeTypeName[34:55]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[34:55]:   NodeTypeBatchNormForInference,
	_NodeTypeName[55:75]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[55:75]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[75:92]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[75:92]:   NodeTypeBatchNormGradient,
	_NodeTypeName[92:100]:       NodeTypeBitCount,
	_NodeTypeLowerName[92:100]:  NodeTypeBitCount,
	_NodeTypeName[100:109]:      NodeTypeBroadcast,
	_NodeTypeLowerName[100:109]: NodeTypeBroadcast,
	_NodeTypeName[109:123]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[109:123]: NodeTypeBroadcastInDim,
	_NodeTypeName[123:127]:      NodeTypeCeil,
	_NodeTypeLowerName[123:127]: NodeTypeCeil,
	_NodeTypeName[127:130]:      NodeTypeClz,
	_NodeTypeLowerName[127:130]: NodeTypeClz,
	_NodeTypeName[130:137]:      NodeTypeComplex,
	_NodeTypeLowerName[130:137]: NodeTypeComplex,
	_NodeTypeName[137:148]:      NodeTypeConcatenate,
	_NodeTypeLowerName[137:148]: NodeTypeConcatenate,
	_NodeTypeName[148:152]:      NodeTypeConj,
	_NodeTypeLowerName[148:152]: NodeTypeConj,
	_NodeTypeName[152:160]:      NodeTypeConstant,
	_NodeTypeLowerName[152:160]: NodeTypeConstant,
	_NodeTypeName[160:178]:      NodeTypeConvGeneralDilated,
	_NodeTypeLowerName[160:178]: NodeTypeConvGeneralDilated,
	_NodeTypeName[178:190]:      NodeTypeConvertDType,
	_NodeTypeLowerName[178:190]: NodeTypeConvertDType,
	_NodeTypeName[190:193]:      NodeTypeCos,
	_NodeTypeLowerName[190:193]: NodeTypeCos,
	_NodeTypeName[193:196]:      NodeTypeDiv,
	_NodeTypeLowerName[193:196]: NodeTypeDiv,
	_NodeTypeName[196:199]:      NodeTypeDot,
	_NodeTypeLowerName[196:199]: NodeTypeDot,
	_NodeTypeName[199:209]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[199:209]: NodeTypeDotGeneral,
	_NodeTypeName[209:221]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[209:221]: NodeTypeDynamicSlice,
	_NodeTypeName[221:239]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[221:239]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[239:244]:      NodeTypeEqual,
	_NodeTypeLowerName[239:244]: NodeTypeEqual,
	_NodeTypeName[244:259]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[244:259]: NodeTypeEqualTotalOrder,
	_NodeTypeName[259:262]:      NodeTypeErf,
	_NodeTypeLowerName[259:262]: NodeTypeErf,
	_NodeTypeName[262:265]:      NodeTypeExp,
	_NodeTypeLowerName[262:265]: NodeTypeExp,
	_NodeTypeName[265:270]:      NodeTypeExpm1,
	_NodeTypeLowerName[265:270]: NodeTypeExpm1,
	_NodeTypeName[270:273]:      NodeTypeFFT,
	_NodeTypeLowerName[270:273]: NodeTypeFFT,
	_NodeTypeName[273:278]:      NodeTypeFloor,
	_NodeTypeLowerName[273:278]: NodeTypeFloor,
	_NodeTypeName[278:284]:      NodeTypeGather,
	_NodeTypeLowerName[278:284]: NodeTypeGather,
	_NodeTypeName[284:298]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[284:298]: NodeTypeGreaterOrEqual,
	_NodeTypeName[298:322]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[298:322]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[322:333]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[322:333]: NodeTypeGreaterThan,
	_NodeTypeName[333:354]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[333:354]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[354:362]:      NodeTypeIdentity,
	_NodeTypeLowerName[354:362]: NodeTypeIdentity,
	_NodeTypeName[362:366]:      NodeTypeImag,
	_NodeTypeLowerName[362:366]: NodeTypeImag,
	_NodeTypeName[366:370]:      NodeTypeIota,
	_NodeTypeLowerName[366:370]: NodeTypeIota,
	_NodeTypeName[370:378]:      NodeTypeIsFinite,
	_NodeTypeLowerName[370:378]: NodeTypeIsFinite,
	_NodeTypeName[378:389]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[378:389]: NodeTypeLessOrEqual,
	_NodeTypeName[389:410]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[389:410]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[410:418]:      NodeTypeLessThan,
	_NodeTypeLowerName[410:418]: NodeTypeLessThan,
	_NodeTypeName[418:436]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[418:436]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[436:439]:      NodeTypeLog,
	_NodeTypeLowerName[436:439]: NodeTypeLog,
	_NodeTypeName[439:444]:      NodeTypeLog1p,
	_NodeTypeLowerName[439:444]: NodeTypeLog1p,
	_NodeTypeName[444:454]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[444:454]: NodeTypeLogicalNot,
	_NodeTypeName[454:462]:      NodeTypeLogistic,
	_NodeTypeLowerName[454:462]: NodeTypeLogistic,
	_NodeTypeName[462:465]:      NodeTypeMax,
	_NodeTypeLowerName[462:465]: NodeTypeMax,
	_NodeTypeName[465:468]:      NodeTypeMin,
	_NodeTypeLowerName[465:468]: NodeTypeMin,
	_NodeTypeName[468:471]:      NodeTypeMul,
	_NodeTypeLowerName[468:471]: NodeTypeMul,
	_NodeTypeName[471:474]:      NodeTypeNeg,
	_NodeTypeLowerName[471:474]: NodeTypeNeg,
	_NodeTypeName[474:482]:      NodeTypeNotEqual,
	_NodeTypeLowerName[474:482]: NodeTypeNotEqual,
	_NodeTypeName[482:500]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[482:500]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[500:502]:      NodeTypeOr,
	_NodeTypeLowerName[500:502]: NodeTypeOr,
	_NodeTypeName[502:505]:      NodeTypePad,
	_NodeTypeLowerName[502:505]: NodeTypePad,
	_NodeTypeName[505:514]:      NodeTypeParameter,
	_NodeTypeLowerName[505:514]: NodeTypeParameter,
	_NodeTypeName[514:517]:      NodeTypePow,
	_NodeTypeLowerName[514:517]: NodeTypePow,
	_NodeTypeName[517:521]:      NodeTypeReal,
	_NodeTypeLowerName[517:521]: NodeTypeReal,
	_NodeTypeName[521:530]:      NodeTypeReduceAnd,
	_NodeTypeLowerName[521:530]: NodeTypeReduceAnd,
	_NodeTypeName[530:539]:      NodeTypeReduceMax,
	_NodeTypeLowerName[530:539]: NodeTypeReduceMax,
	_NodeTypeName[539:548]:      NodeTypeReduceMin,
	_NodeTypeLowerName[539:548]: NodeTypeReduceMin,
	_NodeTypeName[548:556]:      NodeTypeReduceOr,
	_NodeTypeLowerName[548:556]: NodeTypeReduceOr,
	_NodeTypeName[556:569]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[556:569]: NodeTypeReduceProduct,
	_NodeTypeName[569:578]:      NodeTypeReduceSum,
	_NodeTypeLowerName[569:578]: NodeTypeReduceSum,
	_NodeTypeName[578:590]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[578:590]: NodeTypeReduceWindow,
	_NodeTypeName[590:593]:      NodeTypeRem,
	_NodeTypeLowerName[590:593]: NodeTypeRem,
	_NodeTypeName[593:600]:      NodeTypeReshape,
	_NodeTypeLowerName[593:600]: NodeTypeReshape,
	_NodeTypeName[600:607]:      NodeTypeReverse,
	_NodeTypeLowerName[600:607]: NodeTypeReverse,
	_NodeTypeName[607:622]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[607:622]: NodeTypeRngBitGenerator,
	_NodeTypeName[622:627]:      NodeTypeRound,
	_NodeTypeLowerName[622:627]: NodeTypeRound,
	_NodeTypeName[627:632]:      NodeTypeRsqrt,
	_NodeTypeLowerName[627:632]: NodeTypeRsqrt,
	_NodeTypeName[632:642]:      NodeTypeScatterAdd,
	_NodeTypeLowerName[632:642]: NodeTypeScatterAdd,
	_NodeTypeName[642:652]:      NodeTypeScatterMax,
	_NodeTypeLowerName[642:652]: NodeTypeScatterMax,
	_NodeTypeName[652:662]:      NodeTypeScatterMin,
	_NodeTypeLowerName[652:662]: NodeTypeScatterMin,
	_NodeTypeName[662:681]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[662:681]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[681:700]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[681:700]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[700:719]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[700:719]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[719:723]:      NodeTypeSign,
	_NodeTypeLowerName[719:723]: NodeTypeSign,
	_NodeTypeName[723:726]:      NodeTypeSin,
	_NodeTypeLowerName[723:726]: NodeTypeSin,
	_NodeTypeName[726:731]:      NodeTypeSlice,
	_NodeTypeLowerName[726:731]: NodeTypeSlice,
	_NodeTypeName[731:735]:      NodeTypeSqrt,
	_NodeTypeLowerName[731:735]: NodeTypeSqrt,
	_NodeTypeName[735:738]:      NodeTypeSub,
	_NodeTypeLowerName[735:738]: NodeTypeSub,
	_NodeTypeName[738:742]:      NodeTypeTanh,
	_NodeTypeLowerName[738:742]: NodeTypeTanh,
	_NodeTypeName[742:751]:      NodeTypeTranspose,
	_NodeTypeLowerName[742:751]: NodeTypeTranspose,
	_NodeTypeName[751:756]:      NodeTypeWhere,
	_NodeTypeLowerName[751:756]: NodeTypeWhere,
	_NodeTypeName[756:759]:      NodeTypeXor,
	_NodeTypeLowerName[756:759]: NodeTypeXor,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:25],
	_NodeTypeName[25:34],
	_NodeTypeName[34:55],
	_NodeTypeName[55:75],
	_NodeTypeName[75:92],
	_NodeTypeName[92:100],
	_NodeTypeName[100:109],
	_NodeTypeName[109:123],
	_NodeTypeName[123:127],
	_NodeTypeName[127:130],
	_NodeTypeName[130:137],
	_NodeTypeName[137:148],
	_NodeTypeName[148:152],
	_NodeTypeName[152:160],
	_NodeTypeName[160:178],
	_NodeTypeName[178:190],
	_NodeTypeName[190:193],
	_NodeTypeName[193:196],
	_NodeTypeName[196:199],
	_NodeTypeName[199:209],
	_NodeTypeName[209:221],
	_NodeTypeName[221:239],
	_NodeTypeName[239:244],
	_NodeTypeName[244:259],
	_NodeTypeName[259:262],
	_NodeTypeName[262:265],
	_NodeTypeName[265:270],
	_NodeTypeName[270:273],
	_NodeTypeName[273:278],
	_NodeTypeName[278:284],
	_NodeTypeName[284:298],
	_NodeTypeName[298:322],
	_NodeTypeName[322:333],
	_NodeTypeName[333:354],
	_NodeTypeName[354:362],
	_NodeTypeName[362:366],
	_NodeTypeName[366:370],
	_NodeTypeName[370:378],
	_NodeTypeName[378:389],
	_NodeTypeName[389:410],
	_NodeTypeName[410:418],
	_NodeTypeName[418:436],
	_NodeTypeName[436:439],
	_NodeTypeName[439:444],
	_NodeTypeName[444:454],
	_NodeTypeName[454:462],
	_NodeTypeName[462:465],
	_NodeTypeName[465:468],
	_NodeTypeName[468:471],
	_NodeTypeName[471:474],
	_NodeTypeName[474:482],
	_NodeTypeName[482:500],
	_NodeTypeName[500:502],
	_NodeTypeName[502:505],
	_NodeTypeName[505:514],
	_NodeTypeName[514:517],
	_NodeTypeName[517:521],
	_NodeTypeName[521:530],
	_NodeTypeName[530:539],
	_NodeTypeName[539:548],
	_NodeTypeName[548:556],
	_NodeTypeName[556:569],
	_NodeTypeName[569:578],
	_NodeTypeName[578:590],
	_NodeTypeName[590:593],
	_NodeTypeName[593:600],
	_NodeTypeName[600:607],
	_NodeTypeName[607:622],
	_NodeTypeName[622:627],
	_NodeTypeName[627:632],
	_NodeTypeName[632:642],
	_NodeTypeName[642:652],
	_NodeTypeName[652:662],
	_NodeTypeName[662:681],
	_NodeTypeName[681:700],
	_NodeTypeName[700:719],
	_NodeTypeName[719:723],
	_NodeTypeName[723:726],
	_NodeTypeName[726:731],
	_NodeTypeName[731:735],
	_NodeTypeName[735:738],
	_NodeTypeName[738:742],
	_NodeTypeName[742:751],
	_NodeTypeName[751:756],
	_NodeTypeName[756:759],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
