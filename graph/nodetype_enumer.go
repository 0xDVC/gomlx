// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadParameterPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhere"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 31, 52, 72, 89, 97, 104, 114, 124, 133, 143, 152, 166, 170, 173, 180, 191, 195, 203, 214, 226, 229, 232, 235, 245, 257, 275, 280, 295, 298, 301, 306, 309, 314, 320, 334, 358, 369, 390, 398, 402, 406, 414, 425, 446, 454, 472, 475, 480, 490, 500, 509, 519, 527, 530, 533, 536, 539, 547, 565, 568, 577, 580, 584, 600, 615, 631, 647, 662, 678, 687, 696, 709, 718, 730, 733, 740, 747, 762, 767, 772, 782, 792, 802, 821, 840, 859, 868, 888, 905, 909, 912, 917, 921, 924, 928, 937, 942}

const _NodeTypeLowerName = "invalidsplitnodeabsaddargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneralconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadparameterpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewhere"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeArgMinMax-(4)]
	_ = x[NodeTypeBatchNormForInference-(5)]
	_ = x[NodeTypeBatchNormForTraining-(6)]
	_ = x[NodeTypeBatchNormGradient-(7)]
	_ = x[NodeTypeBitCount-(8)]
	_ = x[NodeTypeBitcast-(9)]
	_ = x[NodeTypeBitwiseAnd-(10)]
	_ = x[NodeTypeBitwiseNot-(11)]
	_ = x[NodeTypeBitwiseOr-(12)]
	_ = x[NodeTypeBitwiseXor-(13)]
	_ = x[NodeTypeBroadcast-(14)]
	_ = x[NodeTypeBroadcastInDim-(15)]
	_ = x[NodeTypeCeil-(16)]
	_ = x[NodeTypeClz-(17)]
	_ = x[NodeTypeComplex-(18)]
	_ = x[NodeTypeConcatenate-(19)]
	_ = x[NodeTypeConj-(20)]
	_ = x[NodeTypeConstant-(21)]
	_ = x[NodeTypeConvGeneral-(22)]
	_ = x[NodeTypeConvertDType-(23)]
	_ = x[NodeTypeCos-(24)]
	_ = x[NodeTypeDiv-(25)]
	_ = x[NodeTypeDot-(26)]
	_ = x[NodeTypeDotGeneral-(27)]
	_ = x[NodeTypeDynamicSlice-(28)]
	_ = x[NodeTypeDynamicUpdateSlice-(29)]
	_ = x[NodeTypeEqual-(30)]
	_ = x[NodeTypeEqualTotalOrder-(31)]
	_ = x[NodeTypeErf-(32)]
	_ = x[NodeTypeExp-(33)]
	_ = x[NodeTypeExpm1-(34)]
	_ = x[NodeTypeFFT-(35)]
	_ = x[NodeTypeFloor-(36)]
	_ = x[NodeTypeGather-(37)]
	_ = x[NodeTypeGreaterOrEqual-(38)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(39)]
	_ = x[NodeTypeGreaterThan-(40)]
	_ = x[NodeTypeGreaterThanTotalOrder-(41)]
	_ = x[NodeTypeIdentity-(42)]
	_ = x[NodeTypeImag-(43)]
	_ = x[NodeTypeIota-(44)]
	_ = x[NodeTypeIsFinite-(45)]
	_ = x[NodeTypeLessOrEqual-(46)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(47)]
	_ = x[NodeTypeLessThan-(48)]
	_ = x[NodeTypeLessThanTotalOrder-(49)]
	_ = x[NodeTypeLog-(50)]
	_ = x[NodeTypeLog1p-(51)]
	_ = x[NodeTypeLogicalAnd-(52)]
	_ = x[NodeTypeLogicalNot-(53)]
	_ = x[NodeTypeLogicalOr-(54)]
	_ = x[NodeTypeLogicalXor-(55)]
	_ = x[NodeTypeLogistic-(56)]
	_ = x[NodeTypeMax-(57)]
	_ = x[NodeTypeMin-(58)]
	_ = x[NodeTypeMul-(59)]
	_ = x[NodeTypeNeg-(60)]
	_ = x[NodeTypeNotEqual-(61)]
	_ = x[NodeTypeNotEqualTotalOrder-(62)]
	_ = x[NodeTypePad-(63)]
	_ = x[NodeTypeParameter-(64)]
	_ = x[NodeTypePow-(65)]
	_ = x[NodeTypeReal-(66)]
	_ = x[NodeTypeReduceBitwiseAnd-(67)]
	_ = x[NodeTypeReduceBitwiseOr-(68)]
	_ = x[NodeTypeReduceBitwiseXor-(69)]
	_ = x[NodeTypeReduceLogicalAnd-(70)]
	_ = x[NodeTypeReduceLogicalOr-(71)]
	_ = x[NodeTypeReduceLogicalXor-(72)]
	_ = x[NodeTypeReduceMax-(73)]
	_ = x[NodeTypeReduceMin-(74)]
	_ = x[NodeTypeReduceProduct-(75)]
	_ = x[NodeTypeReduceSum-(76)]
	_ = x[NodeTypeReduceWindow-(77)]
	_ = x[NodeTypeRem-(78)]
	_ = x[NodeTypeReshape-(79)]
	_ = x[NodeTypeReverse-(80)]
	_ = x[NodeTypeRngBitGenerator-(81)]
	_ = x[NodeTypeRound-(82)]
	_ = x[NodeTypeRsqrt-(83)]
	_ = x[NodeTypeScatterMax-(84)]
	_ = x[NodeTypeScatterMin-(85)]
	_ = x[NodeTypeScatterSum-(86)]
	_ = x[NodeTypeSelectAndScatterMax-(87)]
	_ = x[NodeTypeSelectAndScatterMin-(88)]
	_ = x[NodeTypeSelectAndScatterSum-(89)]
	_ = x[NodeTypeShiftLeft-(90)]
	_ = x[NodeTypeShiftRightArithmetic-(91)]
	_ = x[NodeTypeShiftRightLogical-(92)]
	_ = x[NodeTypeSign-(93)]
	_ = x[NodeTypeSin-(94)]
	_ = x[NodeTypeSlice-(95)]
	_ = x[NodeTypeSqrt-(96)]
	_ = x[NodeTypeSub-(97)]
	_ = x[NodeTypeTanh-(98)]
	_ = x[NodeTypeTranspose-(99)]
	_ = x[NodeTypeWhere-(100)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBitcast, NodeTypeBitwiseAnd, NodeTypeBitwiseNot, NodeTypeBitwiseOr, NodeTypeBitwiseXor, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneral, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalAnd, NodeTypeLogicalNot, NodeTypeLogicalOr, NodeTypeLogicalXor, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceBitwiseAnd, NodeTypeReduceBitwiseOr, NodeTypeReduceBitwiseXor, NodeTypeReduceLogicalAnd, NodeTypeReduceLogicalOr, NodeTypeReduceLogicalXor, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeScatterSum, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeShiftLeft, NodeTypeShiftRightArithmetic, NodeTypeShiftRightLogical, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:31]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[22:31]:   NodeTypeArgMinMax,
	_NodeTypeName[31:52]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[31:52]:   NodeTypeBatchNormForInference,
	_NodeTypeName[52:72]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[52:72]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[72:89]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[72:89]:   NodeTypeBatchNormGradient,
	_NodeTypeName[89:97]:        NodeTypeBitCount,
	_NodeTypeLowerName[89:97]:   NodeTypeBitCount,
	_NodeTypeName[97:104]:       NodeTypeBitcast,
	_NodeTypeLowerName[97:104]:  NodeTypeBitcast,
	_NodeTypeName[104:114]:      NodeTypeBitwiseAnd,
	_NodeTypeLowerName[104:114]: NodeTypeBitwiseAnd,
	_NodeTypeName[114:124]:      NodeTypeBitwiseNot,
	_NodeTypeLowerName[114:124]: NodeTypeBitwiseNot,
	_NodeTypeName[124:133]:      NodeTypeBitwiseOr,
	_NodeTypeLowerName[124:133]: NodeTypeBitwiseOr,
	_NodeTypeName[133:143]:      NodeTypeBitwiseXor,
	_NodeTypeLowerName[133:143]: NodeTypeBitwiseXor,
	_NodeTypeName[143:152]:      NodeTypeBroadcast,
	_NodeTypeLowerName[143:152]: NodeTypeBroadcast,
	_NodeTypeName[152:166]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[152:166]: NodeTypeBroadcastInDim,
	_NodeTypeName[166:170]:      NodeTypeCeil,
	_NodeTypeLowerName[166:170]: NodeTypeCeil,
	_NodeTypeName[170:173]:      NodeTypeClz,
	_NodeTypeLowerName[170:173]: NodeTypeClz,
	_NodeTypeName[173:180]:      NodeTypeComplex,
	_NodeTypeLowerName[173:180]: NodeTypeComplex,
	_NodeTypeName[180:191]:      NodeTypeConcatenate,
	_NodeTypeLowerName[180:191]: NodeTypeConcatenate,
	_NodeTypeName[191:195]:      NodeTypeConj,
	_NodeTypeLowerName[191:195]: NodeTypeConj,
	_NodeTypeName[195:203]:      NodeTypeConstant,
	_NodeTypeLowerName[195:203]: NodeTypeConstant,
	_NodeTypeName[203:214]:      NodeTypeConvGeneral,
	_NodeTypeLowerName[203:214]: NodeTypeConvGeneral,
	_NodeTypeName[214:226]:      NodeTypeConvertDType,
	_NodeTypeLowerName[214:226]: NodeTypeConvertDType,
	_NodeTypeName[226:229]:      NodeTypeCos,
	_NodeTypeLowerName[226:229]: NodeTypeCos,
	_NodeTypeName[229:232]:      NodeTypeDiv,
	_NodeTypeLowerName[229:232]: NodeTypeDiv,
	_NodeTypeName[232:235]:      NodeTypeDot,
	_NodeTypeLowerName[232:235]: NodeTypeDot,
	_NodeTypeName[235:245]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[235:245]: NodeTypeDotGeneral,
	_NodeTypeName[245:257]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[245:257]: NodeTypeDynamicSlice,
	_NodeTypeName[257:275]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[257:275]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[275:280]:      NodeTypeEqual,
	_NodeTypeLowerName[275:280]: NodeTypeEqual,
	_NodeTypeName[280:295]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[280:295]: NodeTypeEqualTotalOrder,
	_NodeTypeName[295:298]:      NodeTypeErf,
	_NodeTypeLowerName[295:298]: NodeTypeErf,
	_NodeTypeName[298:301]:      NodeTypeExp,
	_NodeTypeLowerName[298:301]: NodeTypeExp,
	_NodeTypeName[301:306]:      NodeTypeExpm1,
	_NodeTypeLowerName[301:306]: NodeTypeExpm1,
	_NodeTypeName[306:309]:      NodeTypeFFT,
	_NodeTypeLowerName[306:309]: NodeTypeFFT,
	_NodeTypeName[309:314]:      NodeTypeFloor,
	_NodeTypeLowerName[309:314]: NodeTypeFloor,
	_NodeTypeName[314:320]:      NodeTypeGather,
	_NodeTypeLowerName[314:320]: NodeTypeGather,
	_NodeTypeName[320:334]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[320:334]: NodeTypeGreaterOrEqual,
	_NodeTypeName[334:358]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[334:358]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[358:369]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[358:369]: NodeTypeGreaterThan,
	_NodeTypeName[369:390]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[369:390]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[390:398]:      NodeTypeIdentity,
	_NodeTypeLowerName[390:398]: NodeTypeIdentity,
	_NodeTypeName[398:402]:      NodeTypeImag,
	_NodeTypeLowerName[398:402]: NodeTypeImag,
	_NodeTypeName[402:406]:      NodeTypeIota,
	_NodeTypeLowerName[402:406]: NodeTypeIota,
	_NodeTypeName[406:414]:      NodeTypeIsFinite,
	_NodeTypeLowerName[406:414]: NodeTypeIsFinite,
	_NodeTypeName[414:425]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[414:425]: NodeTypeLessOrEqual,
	_NodeTypeName[425:446]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[425:446]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[446:454]:      NodeTypeLessThan,
	_NodeTypeLowerName[446:454]: NodeTypeLessThan,
	_NodeTypeName[454:472]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[454:472]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[472:475]:      NodeTypeLog,
	_NodeTypeLowerName[472:475]: NodeTypeLog,
	_NodeTypeName[475:480]:      NodeTypeLog1p,
	_NodeTypeLowerName[475:480]: NodeTypeLog1p,
	_NodeTypeName[480:490]:      NodeTypeLogicalAnd,
	_NodeTypeLowerName[480:490]: NodeTypeLogicalAnd,
	_NodeTypeName[490:500]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[490:500]: NodeTypeLogicalNot,
	_NodeTypeName[500:509]:      NodeTypeLogicalOr,
	_NodeTypeLowerName[500:509]: NodeTypeLogicalOr,
	_NodeTypeName[509:519]:      NodeTypeLogicalXor,
	_NodeTypeLowerName[509:519]: NodeTypeLogicalXor,
	_NodeTypeName[519:527]:      NodeTypeLogistic,
	_NodeTypeLowerName[519:527]: NodeTypeLogistic,
	_NodeTypeName[527:530]:      NodeTypeMax,
	_NodeTypeLowerName[527:530]: NodeTypeMax,
	_NodeTypeName[530:533]:      NodeTypeMin,
	_NodeTypeLowerName[530:533]: NodeTypeMin,
	_NodeTypeName[533:536]:      NodeTypeMul,
	_NodeTypeLowerName[533:536]: NodeTypeMul,
	_NodeTypeName[536:539]:      NodeTypeNeg,
	_NodeTypeLowerName[536:539]: NodeTypeNeg,
	_NodeTypeName[539:547]:      NodeTypeNotEqual,
	_NodeTypeLowerName[539:547]: NodeTypeNotEqual,
	_NodeTypeName[547:565]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[547:565]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[565:568]:      NodeTypePad,
	_NodeTypeLowerName[565:568]: NodeTypePad,
	_NodeTypeName[568:577]:      NodeTypeParameter,
	_NodeTypeLowerName[568:577]: NodeTypeParameter,
	_NodeTypeName[577:580]:      NodeTypePow,
	_NodeTypeLowerName[577:580]: NodeTypePow,
	_NodeTypeName[580:584]:      NodeTypeReal,
	_NodeTypeLowerName[580:584]: NodeTypeReal,
	_NodeTypeName[584:600]:      NodeTypeReduceBitwiseAnd,
	_NodeTypeLowerName[584:600]: NodeTypeReduceBitwiseAnd,
	_NodeTypeName[600:615]:      NodeTypeReduceBitwiseOr,
	_NodeTypeLowerName[600:615]: NodeTypeReduceBitwiseOr,
	_NodeTypeName[615:631]:      NodeTypeReduceBitwiseXor,
	_NodeTypeLowerName[615:631]: NodeTypeReduceBitwiseXor,
	_NodeTypeName[631:647]:      NodeTypeReduceLogicalAnd,
	_NodeTypeLowerName[631:647]: NodeTypeReduceLogicalAnd,
	_NodeTypeName[647:662]:      NodeTypeReduceLogicalOr,
	_NodeTypeLowerName[647:662]: NodeTypeReduceLogicalOr,
	_NodeTypeName[662:678]:      NodeTypeReduceLogicalXor,
	_NodeTypeLowerName[662:678]: NodeTypeReduceLogicalXor,
	_NodeTypeName[678:687]:      NodeTypeReduceMax,
	_NodeTypeLowerName[678:687]: NodeTypeReduceMax,
	_NodeTypeName[687:696]:      NodeTypeReduceMin,
	_NodeTypeLowerName[687:696]: NodeTypeReduceMin,
	_NodeTypeName[696:709]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[696:709]: NodeTypeReduceProduct,
	_NodeTypeName[709:718]:      NodeTypeReduceSum,
	_NodeTypeLowerName[709:718]: NodeTypeReduceSum,
	_NodeTypeName[718:730]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[718:730]: NodeTypeReduceWindow,
	_NodeTypeName[730:733]:      NodeTypeRem,
	_NodeTypeLowerName[730:733]: NodeTypeRem,
	_NodeTypeName[733:740]:      NodeTypeReshape,
	_NodeTypeLowerName[733:740]: NodeTypeReshape,
	_NodeTypeName[740:747]:      NodeTypeReverse,
	_NodeTypeLowerName[740:747]: NodeTypeReverse,
	_NodeTypeName[747:762]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[747:762]: NodeTypeRngBitGenerator,
	_NodeTypeName[762:767]:      NodeTypeRound,
	_NodeTypeLowerName[762:767]: NodeTypeRound,
	_NodeTypeName[767:772]:      NodeTypeRsqrt,
	_NodeTypeLowerName[767:772]: NodeTypeRsqrt,
	_NodeTypeName[772:782]:      NodeTypeScatterMax,
	_NodeTypeLowerName[772:782]: NodeTypeScatterMax,
	_NodeTypeName[782:792]:      NodeTypeScatterMin,
	_NodeTypeLowerName[782:792]: NodeTypeScatterMin,
	_NodeTypeName[792:802]:      NodeTypeScatterSum,
	_NodeTypeLowerName[792:802]: NodeTypeScatterSum,
	_NodeTypeName[802:821]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[802:821]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[821:840]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[821:840]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[840:859]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[840:859]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[859:868]:      NodeTypeShiftLeft,
	_NodeTypeLowerName[859:868]: NodeTypeShiftLeft,
	_NodeTypeName[868:888]:      NodeTypeShiftRightArithmetic,
	_NodeTypeLowerName[868:888]: NodeTypeShiftRightArithmetic,
	_NodeTypeName[888:905]:      NodeTypeShiftRightLogical,
	_NodeTypeLowerName[888:905]: NodeTypeShiftRightLogical,
	_NodeTypeName[905:909]:      NodeTypeSign,
	_NodeTypeLowerName[905:909]: NodeTypeSign,
	_NodeTypeName[909:912]:      NodeTypeSin,
	_NodeTypeLowerName[909:912]: NodeTypeSin,
	_NodeTypeName[912:917]:      NodeTypeSlice,
	_NodeTypeLowerName[912:917]: NodeTypeSlice,
	_NodeTypeName[917:921]:      NodeTypeSqrt,
	_NodeTypeLowerName[917:921]: NodeTypeSqrt,
	_NodeTypeName[921:924]:      NodeTypeSub,
	_NodeTypeLowerName[921:924]: NodeTypeSub,
	_NodeTypeName[924:928]:      NodeTypeTanh,
	_NodeTypeLowerName[924:928]: NodeTypeTanh,
	_NodeTypeName[928:937]:      NodeTypeTranspose,
	_NodeTypeLowerName[928:937]: NodeTypeTranspose,
	_NodeTypeName[937:942]:      NodeTypeWhere,
	_NodeTypeLowerName[937:942]: NodeTypeWhere,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:31],
	_NodeTypeName[31:52],
	_NodeTypeName[52:72],
	_NodeTypeName[72:89],
	_NodeTypeName[89:97],
	_NodeTypeName[97:104],
	_NodeTypeName[104:114],
	_NodeTypeName[114:124],
	_NodeTypeName[124:133],
	_NodeTypeName[133:143],
	_NodeTypeName[143:152],
	_NodeTypeName[152:166],
	_NodeTypeName[166:170],
	_NodeTypeName[170:173],
	_NodeTypeName[173:180],
	_NodeTypeName[180:191],
	_NodeTypeName[191:195],
	_NodeTypeName[195:203],
	_NodeTypeName[203:214],
	_NodeTypeName[214:226],
	_NodeTypeName[226:229],
	_NodeTypeName[229:232],
	_NodeTypeName[232:235],
	_NodeTypeName[235:245],
	_NodeTypeName[245:257],
	_NodeTypeName[257:275],
	_NodeTypeName[275:280],
	_NodeTypeName[280:295],
	_NodeTypeName[295:298],
	_NodeTypeName[298:301],
	_NodeTypeName[301:306],
	_NodeTypeName[306:309],
	_NodeTypeName[309:314],
	_NodeTypeName[314:320],
	_NodeTypeName[320:334],
	_NodeTypeName[334:358],
	_NodeTypeName[358:369],
	_NodeTypeName[369:390],
	_NodeTypeName[390:398],
	_NodeTypeName[398:402],
	_NodeTypeName[402:406],
	_NodeTypeName[406:414],
	_NodeTypeName[414:425],
	_NodeTypeName[425:446],
	_NodeTypeName[446:454],
	_NodeTypeName[454:472],
	_NodeTypeName[472:475],
	_NodeTypeName[475:480],
	_NodeTypeName[480:490],
	_NodeTypeName[490:500],
	_NodeTypeName[500:509],
	_NodeTypeName[509:519],
	_NodeTypeName[519:527],
	_NodeTypeName[527:530],
	_NodeTypeName[530:533],
	_NodeTypeName[533:536],
	_NodeTypeName[536:539],
	_NodeTypeName[539:547],
	_NodeTypeName[547:565],
	_NodeTypeName[565:568],
	_NodeTypeName[568:577],
	_NodeTypeName[577:580],
	_NodeTypeName[580:584],
	_NodeTypeName[584:600],
	_NodeTypeName[600:615],
	_NodeTypeName[615:631],
	_NodeTypeName[631:647],
	_NodeTypeName[647:662],
	_NodeTypeName[662:678],
	_NodeTypeName[678:687],
	_NodeTypeName[687:696],
	_NodeTypeName[696:709],
	_NodeTypeName[709:718],
	_NodeTypeName[718:730],
	_NodeTypeName[730:733],
	_NodeTypeName[733:740],
	_NodeTypeName[740:747],
	_NodeTypeName[747:762],
	_NodeTypeName[762:767],
	_NodeTypeName[767:772],
	_NodeTypeName[772:782],
	_NodeTypeName[782:792],
	_NodeTypeName[792:802],
	_NodeTypeName[802:821],
	_NodeTypeName[821:840],
	_NodeTypeName[840:859],
	_NodeTypeName[859:868],
	_NodeTypeName[868:888],
	_NodeTypeName[888:905],
	_NodeTypeName[905:909],
	_NodeTypeName[909:912],
	_NodeTypeName[912:917],
	_NodeTypeName[917:921],
	_NodeTypeName[921:924],
	_NodeTypeName[924:928],
	_NodeTypeName[928:937],
	_NodeTypeName[937:942],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
