// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalNotLogisticMaxMinMulNegNotEqualNotEqualTotalOrderOrPadParameterPowRealReduceAndReduceMaxReduceMinReduceOrReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumSignSinSliceSqrtSubTanhTransposeWhereXor"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 25, 34, 55, 75, 92, 101, 115, 119, 122, 129, 140, 144, 152, 170, 182, 185, 188, 191, 201, 213, 231, 236, 251, 254, 257, 262, 265, 270, 276, 290, 314, 325, 346, 354, 358, 362, 373, 394, 402, 420, 423, 428, 438, 446, 449, 452, 455, 458, 466, 484, 486, 489, 498, 501, 505, 514, 523, 532, 540, 553, 562, 574, 577, 584, 591, 606, 611, 616, 626, 636, 646, 665, 684, 703, 707, 710, 715, 719, 722, 726, 735, 740, 743}

const _NodeTypeLowerName = "invalidsplitnodeabsaddandargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotalessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalnotlogisticmaxminmulnegnotequalnotequaltotalorderorpadparameterpowrealreduceandreducemaxreduceminreduceorreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscatteraddscattermaxscatterminselectandscattermaxselectandscatterminselectandscattersumsignsinslicesqrtsubtanhtransposewherexor"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeAnd-(4)]
	_ = x[NodeTypeArgMinMax-(5)]
	_ = x[NodeTypeBatchNormForInference-(6)]
	_ = x[NodeTypeBatchNormForTraining-(7)]
	_ = x[NodeTypeBatchNormGradient-(8)]
	_ = x[NodeTypeBroadcast-(9)]
	_ = x[NodeTypeBroadcastInDim-(10)]
	_ = x[NodeTypeCeil-(11)]
	_ = x[NodeTypeClz-(12)]
	_ = x[NodeTypeComplex-(13)]
	_ = x[NodeTypeConcatenate-(14)]
	_ = x[NodeTypeConj-(15)]
	_ = x[NodeTypeConstant-(16)]
	_ = x[NodeTypeConvGeneralDilated-(17)]
	_ = x[NodeTypeConvertDType-(18)]
	_ = x[NodeTypeCos-(19)]
	_ = x[NodeTypeDiv-(20)]
	_ = x[NodeTypeDot-(21)]
	_ = x[NodeTypeDotGeneral-(22)]
	_ = x[NodeTypeDynamicSlice-(23)]
	_ = x[NodeTypeDynamicUpdateSlice-(24)]
	_ = x[NodeTypeEqual-(25)]
	_ = x[NodeTypeEqualTotalOrder-(26)]
	_ = x[NodeTypeErf-(27)]
	_ = x[NodeTypeExp-(28)]
	_ = x[NodeTypeExpm1-(29)]
	_ = x[NodeTypeFFT-(30)]
	_ = x[NodeTypeFloor-(31)]
	_ = x[NodeTypeGather-(32)]
	_ = x[NodeTypeGreaterOrEqual-(33)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(34)]
	_ = x[NodeTypeGreaterThan-(35)]
	_ = x[NodeTypeGreaterThanTotalOrder-(36)]
	_ = x[NodeTypeIdentity-(37)]
	_ = x[NodeTypeImag-(38)]
	_ = x[NodeTypeIota-(39)]
	_ = x[NodeTypeLessOrEqual-(40)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(41)]
	_ = x[NodeTypeLessThan-(42)]
	_ = x[NodeTypeLessThanTotalOrder-(43)]
	_ = x[NodeTypeLog-(44)]
	_ = x[NodeTypeLog1p-(45)]
	_ = x[NodeTypeLogicalNot-(46)]
	_ = x[NodeTypeLogistic-(47)]
	_ = x[NodeTypeMax-(48)]
	_ = x[NodeTypeMin-(49)]
	_ = x[NodeTypeMul-(50)]
	_ = x[NodeTypeNeg-(51)]
	_ = x[NodeTypeNotEqual-(52)]
	_ = x[NodeTypeNotEqualTotalOrder-(53)]
	_ = x[NodeTypeOr-(54)]
	_ = x[NodeTypePad-(55)]
	_ = x[NodeTypeParameter-(56)]
	_ = x[NodeTypePow-(57)]
	_ = x[NodeTypeReal-(58)]
	_ = x[NodeTypeReduceAnd-(59)]
	_ = x[NodeTypeReduceMax-(60)]
	_ = x[NodeTypeReduceMin-(61)]
	_ = x[NodeTypeReduceOr-(62)]
	_ = x[NodeTypeReduceProduct-(63)]
	_ = x[NodeTypeReduceSum-(64)]
	_ = x[NodeTypeReduceWindow-(65)]
	_ = x[NodeTypeRem-(66)]
	_ = x[NodeTypeReshape-(67)]
	_ = x[NodeTypeReverse-(68)]
	_ = x[NodeTypeRngBitGenerator-(69)]
	_ = x[NodeTypeRound-(70)]
	_ = x[NodeTypeRsqrt-(71)]
	_ = x[NodeTypeScatterAdd-(72)]
	_ = x[NodeTypeScatterMax-(73)]
	_ = x[NodeTypeScatterMin-(74)]
	_ = x[NodeTypeSelectAndScatterMax-(75)]
	_ = x[NodeTypeSelectAndScatterMin-(76)]
	_ = x[NodeTypeSelectAndScatterSum-(77)]
	_ = x[NodeTypeSign-(78)]
	_ = x[NodeTypeSin-(79)]
	_ = x[NodeTypeSlice-(80)]
	_ = x[NodeTypeSqrt-(81)]
	_ = x[NodeTypeSub-(82)]
	_ = x[NodeTypeTanh-(83)]
	_ = x[NodeTypeTranspose-(84)]
	_ = x[NodeTypeWhere-(85)]
	_ = x[NodeTypeXor-(86)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeAnd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneralDilated, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalNot, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypeOr, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceAnd, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceOr, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterAdd, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere, NodeTypeXor}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:25]:        NodeTypeAnd,
	_NodeTypeLowerName[22:25]:   NodeTypeAnd,
	_NodeTypeName[25:34]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[25:34]:   NodeTypeArgMinMax,
	_NodeTypeName[34:55]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[34:55]:   NodeTypeBatchNormForInference,
	_NodeTypeName[55:75]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[55:75]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[75:92]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[75:92]:   NodeTypeBatchNormGradient,
	_NodeTypeName[92:101]:       NodeTypeBroadcast,
	_NodeTypeLowerName[92:101]:  NodeTypeBroadcast,
	_NodeTypeName[101:115]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[101:115]: NodeTypeBroadcastInDim,
	_NodeTypeName[115:119]:      NodeTypeCeil,
	_NodeTypeLowerName[115:119]: NodeTypeCeil,
	_NodeTypeName[119:122]:      NodeTypeClz,
	_NodeTypeLowerName[119:122]: NodeTypeClz,
	_NodeTypeName[122:129]:      NodeTypeComplex,
	_NodeTypeLowerName[122:129]: NodeTypeComplex,
	_NodeTypeName[129:140]:      NodeTypeConcatenate,
	_NodeTypeLowerName[129:140]: NodeTypeConcatenate,
	_NodeTypeName[140:144]:      NodeTypeConj,
	_NodeTypeLowerName[140:144]: NodeTypeConj,
	_NodeTypeName[144:152]:      NodeTypeConstant,
	_NodeTypeLowerName[144:152]: NodeTypeConstant,
	_NodeTypeName[152:170]:      NodeTypeConvGeneralDilated,
	_NodeTypeLowerName[152:170]: NodeTypeConvGeneralDilated,
	_NodeTypeName[170:182]:      NodeTypeConvertDType,
	_NodeTypeLowerName[170:182]: NodeTypeConvertDType,
	_NodeTypeName[182:185]:      NodeTypeCos,
	_NodeTypeLowerName[182:185]: NodeTypeCos,
	_NodeTypeName[185:188]:      NodeTypeDiv,
	_NodeTypeLowerName[185:188]: NodeTypeDiv,
	_NodeTypeName[188:191]:      NodeTypeDot,
	_NodeTypeLowerName[188:191]: NodeTypeDot,
	_NodeTypeName[191:201]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[191:201]: NodeTypeDotGeneral,
	_NodeTypeName[201:213]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[201:213]: NodeTypeDynamicSlice,
	_NodeTypeName[213:231]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[213:231]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[231:236]:      NodeTypeEqual,
	_NodeTypeLowerName[231:236]: NodeTypeEqual,
	_NodeTypeName[236:251]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[236:251]: NodeTypeEqualTotalOrder,
	_NodeTypeName[251:254]:      NodeTypeErf,
	_NodeTypeLowerName[251:254]: NodeTypeErf,
	_NodeTypeName[254:257]:      NodeTypeExp,
	_NodeTypeLowerName[254:257]: NodeTypeExp,
	_NodeTypeName[257:262]:      NodeTypeExpm1,
	_NodeTypeLowerName[257:262]: NodeTypeExpm1,
	_NodeTypeName[262:265]:      NodeTypeFFT,
	_NodeTypeLowerName[262:265]: NodeTypeFFT,
	_NodeTypeName[265:270]:      NodeTypeFloor,
	_NodeTypeLowerName[265:270]: NodeTypeFloor,
	_NodeTypeName[270:276]:      NodeTypeGather,
	_NodeTypeLowerName[270:276]: NodeTypeGather,
	_NodeTypeName[276:290]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[276:290]: NodeTypeGreaterOrEqual,
	_NodeTypeName[290:314]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[290:314]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[314:325]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[314:325]: NodeTypeGreaterThan,
	_NodeTypeName[325:346]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[325:346]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[346:354]:      NodeTypeIdentity,
	_NodeTypeLowerName[346:354]: NodeTypeIdentity,
	_NodeTypeName[354:358]:      NodeTypeImag,
	_NodeTypeLowerName[354:358]: NodeTypeImag,
	_NodeTypeName[358:362]:      NodeTypeIota,
	_NodeTypeLowerName[358:362]: NodeTypeIota,
	_NodeTypeName[362:373]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[362:373]: NodeTypeLessOrEqual,
	_NodeTypeName[373:394]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[373:394]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[394:402]:      NodeTypeLessThan,
	_NodeTypeLowerName[394:402]: NodeTypeLessThan,
	_NodeTypeName[402:420]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[402:420]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[420:423]:      NodeTypeLog,
	_NodeTypeLowerName[420:423]: NodeTypeLog,
	_NodeTypeName[423:428]:      NodeTypeLog1p,
	_NodeTypeLowerName[423:428]: NodeTypeLog1p,
	_NodeTypeName[428:438]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[428:438]: NodeTypeLogicalNot,
	_NodeTypeName[438:446]:      NodeTypeLogistic,
	_NodeTypeLowerName[438:446]: NodeTypeLogistic,
	_NodeTypeName[446:449]:      NodeTypeMax,
	_NodeTypeLowerName[446:449]: NodeTypeMax,
	_NodeTypeName[449:452]:      NodeTypeMin,
	_NodeTypeLowerName[449:452]: NodeTypeMin,
	_NodeTypeName[452:455]:      NodeTypeMul,
	_NodeTypeLowerName[452:455]: NodeTypeMul,
	_NodeTypeName[455:458]:      NodeTypeNeg,
	_NodeTypeLowerName[455:458]: NodeTypeNeg,
	_NodeTypeName[458:466]:      NodeTypeNotEqual,
	_NodeTypeLowerName[458:466]: NodeTypeNotEqual,
	_NodeTypeName[466:484]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[466:484]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[484:486]:      NodeTypeOr,
	_NodeTypeLowerName[484:486]: NodeTypeOr,
	_NodeTypeName[486:489]:      NodeTypePad,
	_NodeTypeLowerName[486:489]: NodeTypePad,
	_NodeTypeName[489:498]:      NodeTypeParameter,
	_NodeTypeLowerName[489:498]: NodeTypeParameter,
	_NodeTypeName[498:501]:      NodeTypePow,
	_NodeTypeLowerName[498:501]: NodeTypePow,
	_NodeTypeName[501:505]:      NodeTypeReal,
	_NodeTypeLowerName[501:505]: NodeTypeReal,
	_NodeTypeName[505:514]:      NodeTypeReduceAnd,
	_NodeTypeLowerName[505:514]: NodeTypeReduceAnd,
	_NodeTypeName[514:523]:      NodeTypeReduceMax,
	_NodeTypeLowerName[514:523]: NodeTypeReduceMax,
	_NodeTypeName[523:532]:      NodeTypeReduceMin,
	_NodeTypeLowerName[523:532]: NodeTypeReduceMin,
	_NodeTypeName[532:540]:      NodeTypeReduceOr,
	_NodeTypeLowerName[532:540]: NodeTypeReduceOr,
	_NodeTypeName[540:553]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[540:553]: NodeTypeReduceProduct,
	_NodeTypeName[553:562]:      NodeTypeReduceSum,
	_NodeTypeLowerName[553:562]: NodeTypeReduceSum,
	_NodeTypeName[562:574]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[562:574]: NodeTypeReduceWindow,
	_NodeTypeName[574:577]:      NodeTypeRem,
	_NodeTypeLowerName[574:577]: NodeTypeRem,
	_NodeTypeName[577:584]:      NodeTypeReshape,
	_NodeTypeLowerName[577:584]: NodeTypeReshape,
	_NodeTypeName[584:591]:      NodeTypeReverse,
	_NodeTypeLowerName[584:591]: NodeTypeReverse,
	_NodeTypeName[591:606]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[591:606]: NodeTypeRngBitGenerator,
	_NodeTypeName[606:611]:      NodeTypeRound,
	_NodeTypeLowerName[606:611]: NodeTypeRound,
	_NodeTypeName[611:616]:      NodeTypeRsqrt,
	_NodeTypeLowerName[611:616]: NodeTypeRsqrt,
	_NodeTypeName[616:626]:      NodeTypeScatterAdd,
	_NodeTypeLowerName[616:626]: NodeTypeScatterAdd,
	_NodeTypeName[626:636]:      NodeTypeScatterMax,
	_NodeTypeLowerName[626:636]: NodeTypeScatterMax,
	_NodeTypeName[636:646]:      NodeTypeScatterMin,
	_NodeTypeLowerName[636:646]: NodeTypeScatterMin,
	_NodeTypeName[646:665]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[646:665]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[665:684]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[665:684]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[684:703]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[684:703]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[703:707]:      NodeTypeSign,
	_NodeTypeLowerName[703:707]: NodeTypeSign,
	_NodeTypeName[707:710]:      NodeTypeSin,
	_NodeTypeLowerName[707:710]: NodeTypeSin,
	_NodeTypeName[710:715]:      NodeTypeSlice,
	_NodeTypeLowerName[710:715]: NodeTypeSlice,
	_NodeTypeName[715:719]:      NodeTypeSqrt,
	_NodeTypeLowerName[715:719]: NodeTypeSqrt,
	_NodeTypeName[719:722]:      NodeTypeSub,
	_NodeTypeLowerName[719:722]: NodeTypeSub,
	_NodeTypeName[722:726]:      NodeTypeTanh,
	_NodeTypeLowerName[722:726]: NodeTypeTanh,
	_NodeTypeName[726:735]:      NodeTypeTranspose,
	_NodeTypeLowerName[726:735]: NodeTypeTranspose,
	_NodeTypeName[735:740]:      NodeTypeWhere,
	_NodeTypeLowerName[735:740]: NodeTypeWhere,
	_NodeTypeName[740:743]:      NodeTypeXor,
	_NodeTypeLowerName[740:743]: NodeTypeXor,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:25],
	_NodeTypeName[25:34],
	_NodeTypeName[34:55],
	_NodeTypeName[55:75],
	_NodeTypeName[75:92],
	_NodeTypeName[92:101],
	_NodeTypeName[101:115],
	_NodeTypeName[115:119],
	_NodeTypeName[119:122],
	_NodeTypeName[122:129],
	_NodeTypeName[129:140],
	_NodeTypeName[140:144],
	_NodeTypeName[144:152],
	_NodeTypeName[152:170],
	_NodeTypeName[170:182],
	_NodeTypeName[182:185],
	_NodeTypeName[185:188],
	_NodeTypeName[188:191],
	_NodeTypeName[191:201],
	_NodeTypeName[201:213],
	_NodeTypeName[213:231],
	_NodeTypeName[231:236],
	_NodeTypeName[236:251],
	_NodeTypeName[251:254],
	_NodeTypeName[254:257],
	_NodeTypeName[257:262],
	_NodeTypeName[262:265],
	_NodeTypeName[265:270],
	_NodeTypeName[270:276],
	_NodeTypeName[276:290],
	_NodeTypeName[290:314],
	_NodeTypeName[314:325],
	_NodeTypeName[325:346],
	_NodeTypeName[346:354],
	_NodeTypeName[354:358],
	_NodeTypeName[358:362],
	_NodeTypeName[362:373],
	_NodeTypeName[373:394],
	_NodeTypeName[394:402],
	_NodeTypeName[402:420],
	_NodeTypeName[420:423],
	_NodeTypeName[423:428],
	_NodeTypeName[428:438],
	_NodeTypeName[438:446],
	_NodeTypeName[446:449],
	_NodeTypeName[449:452],
	_NodeTypeName[452:455],
	_NodeTypeName[455:458],
	_NodeTypeName[458:466],
	_NodeTypeName[466:484],
	_NodeTypeName[484:486],
	_NodeTypeName[486:489],
	_NodeTypeName[489:498],
	_NodeTypeName[498:501],
	_NodeTypeName[501:505],
	_NodeTypeName[505:514],
	_NodeTypeName[514:523],
	_NodeTypeName[523:532],
	_NodeTypeName[532:540],
	_NodeTypeName[540:553],
	_NodeTypeName[553:562],
	_NodeTypeName[562:574],
	_NodeTypeName[574:577],
	_NodeTypeName[577:584],
	_NodeTypeName[584:591],
	_NodeTypeName[591:606],
	_NodeTypeName[606:611],
	_NodeTypeName[611:616],
	_NodeTypeName[616:626],
	_NodeTypeName[626:636],
	_NodeTypeName[636:646],
	_NodeTypeName[646:665],
	_NodeTypeName[665:684],
	_NodeTypeName[684:703],
	_NodeTypeName[703:707],
	_NodeTypeName[707:710],
	_NodeTypeName[710:715],
	_NodeTypeName[715:719],
	_NodeTypeName[719:722],
	_NodeTypeName[722:726],
	_NodeTypeName[726:735],
	_NodeTypeName[735:740],
	_NodeTypeName[740:743],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
